// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServerArticleSvcClient is the client API for FileServerArticleSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerArticleSvcClient interface {
	UploadArticlePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerArticleSvc_UploadArticlePostersClient, error)
	DeleteArticlePoster(ctx context.Context, in *DeleteArticlePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerArticleSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerArticleSvcClient(cc grpc.ClientConnInterface) FileServerArticleSvcClient {
	return &fileServerArticleSvcClient{cc}
}

func (c *fileServerArticleSvcClient) UploadArticlePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerArticleSvc_UploadArticlePostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerArticleSvc_ServiceDesc.Streams[0], "/service.FileServerArticleSvc/UploadArticlePosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerArticleSvcUploadArticlePostersClient{stream}
	return x, nil
}

type FileServerArticleSvc_UploadArticlePostersClient interface {
	Send(*UploadArticlePostersFSRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerArticleSvcUploadArticlePostersClient struct {
	grpc.ClientStream
}

func (x *fileServerArticleSvcUploadArticlePostersClient) Send(m *UploadArticlePostersFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerArticleSvcUploadArticlePostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerArticleSvcClient) DeleteArticlePoster(ctx context.Context, in *DeleteArticlePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerArticleSvc/DeleteArticlePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerArticleSvcServer is the server API for FileServerArticleSvc service.
// All implementations must embed UnimplementedFileServerArticleSvcServer
// for forward compatibility
type FileServerArticleSvcServer interface {
	UploadArticlePosters(FileServerArticleSvc_UploadArticlePostersServer) error
	DeleteArticlePoster(context.Context, *DeleteArticlePosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerArticleSvcServer()
}

// UnimplementedFileServerArticleSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerArticleSvcServer struct {
}

func (UnimplementedFileServerArticleSvcServer) UploadArticlePosters(FileServerArticleSvc_UploadArticlePostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadArticlePosters not implemented")
}
func (UnimplementedFileServerArticleSvcServer) DeleteArticlePoster(context.Context, *DeleteArticlePosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticlePoster not implemented")
}
func (UnimplementedFileServerArticleSvcServer) mustEmbedUnimplementedFileServerArticleSvcServer() {}

// UnsafeFileServerArticleSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerArticleSvcServer will
// result in compilation errors.
type UnsafeFileServerArticleSvcServer interface {
	mustEmbedUnimplementedFileServerArticleSvcServer()
}

func RegisterFileServerArticleSvcServer(s grpc.ServiceRegistrar, srv FileServerArticleSvcServer) {
	s.RegisterService(&FileServerArticleSvc_ServiceDesc, srv)
}

func _FileServerArticleSvc_UploadArticlePosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerArticleSvcServer).UploadArticlePosters(&fileServerArticleSvcUploadArticlePostersServer{stream})
}

type FileServerArticleSvc_UploadArticlePostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadArticlePostersFSRequest, error)
	grpc.ServerStream
}

type fileServerArticleSvcUploadArticlePostersServer struct {
	grpc.ServerStream
}

func (x *fileServerArticleSvcUploadArticlePostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerArticleSvcUploadArticlePostersServer) Recv() (*UploadArticlePostersFSRequest, error) {
	m := new(UploadArticlePostersFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerArticleSvc_DeleteArticlePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticlePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerArticleSvcServer).DeleteArticlePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerArticleSvc/DeleteArticlePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerArticleSvcServer).DeleteArticlePoster(ctx, req.(*DeleteArticlePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerArticleSvc_ServiceDesc is the grpc.ServiceDesc for FileServerArticleSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerArticleSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerArticleSvc",
	HandlerType: (*FileServerArticleSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteArticlePoster",
			Handler:    _FileServerArticleSvc_DeleteArticlePoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadArticlePosters",
			Handler:       _FileServerArticleSvc_UploadArticlePosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerSeasonSvcClient is the client API for FileServerSeasonSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerSeasonSvcClient interface {
	UploadSeasonPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerSeasonSvc_UploadSeasonPostersClient, error)
	DeleteSeasonPoster(ctx context.Context, in *DeleteSeasonPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerSeasonSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerSeasonSvcClient(cc grpc.ClientConnInterface) FileServerSeasonSvcClient {
	return &fileServerSeasonSvcClient{cc}
}

func (c *fileServerSeasonSvcClient) UploadSeasonPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerSeasonSvc_UploadSeasonPostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerSeasonSvc_ServiceDesc.Streams[0], "/service.FileServerSeasonSvc/UploadSeasonPosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerSeasonSvcUploadSeasonPostersClient{stream}
	return x, nil
}

type FileServerSeasonSvc_UploadSeasonPostersClient interface {
	Send(*UploadSeasonPostersFSRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerSeasonSvcUploadSeasonPostersClient struct {
	grpc.ClientStream
}

func (x *fileServerSeasonSvcUploadSeasonPostersClient) Send(m *UploadSeasonPostersFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerSeasonSvcUploadSeasonPostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerSeasonSvcClient) DeleteSeasonPoster(ctx context.Context, in *DeleteSeasonPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerSeasonSvc/DeleteSeasonPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerSeasonSvcServer is the server API for FileServerSeasonSvc service.
// All implementations must embed UnimplementedFileServerSeasonSvcServer
// for forward compatibility
type FileServerSeasonSvcServer interface {
	UploadSeasonPosters(FileServerSeasonSvc_UploadSeasonPostersServer) error
	DeleteSeasonPoster(context.Context, *DeleteSeasonPosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerSeasonSvcServer()
}

// UnimplementedFileServerSeasonSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerSeasonSvcServer struct {
}

func (UnimplementedFileServerSeasonSvcServer) UploadSeasonPosters(FileServerSeasonSvc_UploadSeasonPostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadSeasonPosters not implemented")
}
func (UnimplementedFileServerSeasonSvcServer) DeleteSeasonPoster(context.Context, *DeleteSeasonPosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeasonPoster not implemented")
}
func (UnimplementedFileServerSeasonSvcServer) mustEmbedUnimplementedFileServerSeasonSvcServer() {}

// UnsafeFileServerSeasonSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerSeasonSvcServer will
// result in compilation errors.
type UnsafeFileServerSeasonSvcServer interface {
	mustEmbedUnimplementedFileServerSeasonSvcServer()
}

func RegisterFileServerSeasonSvcServer(s grpc.ServiceRegistrar, srv FileServerSeasonSvcServer) {
	s.RegisterService(&FileServerSeasonSvc_ServiceDesc, srv)
}

func _FileServerSeasonSvc_UploadSeasonPosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerSeasonSvcServer).UploadSeasonPosters(&fileServerSeasonSvcUploadSeasonPostersServer{stream})
}

type FileServerSeasonSvc_UploadSeasonPostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadSeasonPostersFSRequest, error)
	grpc.ServerStream
}

type fileServerSeasonSvcUploadSeasonPostersServer struct {
	grpc.ServerStream
}

func (x *fileServerSeasonSvcUploadSeasonPostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerSeasonSvcUploadSeasonPostersServer) Recv() (*UploadSeasonPostersFSRequest, error) {
	m := new(UploadSeasonPostersFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerSeasonSvc_DeleteSeasonPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeasonPosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerSeasonSvcServer).DeleteSeasonPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerSeasonSvc/DeleteSeasonPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerSeasonSvcServer).DeleteSeasonPoster(ctx, req.(*DeleteSeasonPosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerSeasonSvc_ServiceDesc is the grpc.ServiceDesc for FileServerSeasonSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerSeasonSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerSeasonSvc",
	HandlerType: (*FileServerSeasonSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteSeasonPoster",
			Handler:    _FileServerSeasonSvc_DeleteSeasonPoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadSeasonPosters",
			Handler:       _FileServerSeasonSvc_UploadSeasonPosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerEpisodeSvcClient is the client API for FileServerEpisodeSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerEpisodeSvcClient interface {
	UploadEpisodePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerEpisodeSvc_UploadEpisodePostersClient, error)
	DeleteEpisodePoster(ctx context.Context, in *DeleteEpisodePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerEpisodeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerEpisodeSvcClient(cc grpc.ClientConnInterface) FileServerEpisodeSvcClient {
	return &fileServerEpisodeSvcClient{cc}
}

func (c *fileServerEpisodeSvcClient) UploadEpisodePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerEpisodeSvc_UploadEpisodePostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerEpisodeSvc_ServiceDesc.Streams[0], "/service.FileServerEpisodeSvc/UploadEpisodePosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerEpisodeSvcUploadEpisodePostersClient{stream}
	return x, nil
}

type FileServerEpisodeSvc_UploadEpisodePostersClient interface {
	Send(*UploadEpisodePostersFSRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerEpisodeSvcUploadEpisodePostersClient struct {
	grpc.ClientStream
}

func (x *fileServerEpisodeSvcUploadEpisodePostersClient) Send(m *UploadEpisodePostersFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerEpisodeSvcUploadEpisodePostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerEpisodeSvcClient) DeleteEpisodePoster(ctx context.Context, in *DeleteEpisodePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerEpisodeSvc/DeleteEpisodePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerEpisodeSvcServer is the server API for FileServerEpisodeSvc service.
// All implementations must embed UnimplementedFileServerEpisodeSvcServer
// for forward compatibility
type FileServerEpisodeSvcServer interface {
	UploadEpisodePosters(FileServerEpisodeSvc_UploadEpisodePostersServer) error
	DeleteEpisodePoster(context.Context, *DeleteEpisodePosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerEpisodeSvcServer()
}

// UnimplementedFileServerEpisodeSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerEpisodeSvcServer struct {
}

func (UnimplementedFileServerEpisodeSvcServer) UploadEpisodePosters(FileServerEpisodeSvc_UploadEpisodePostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadEpisodePosters not implemented")
}
func (UnimplementedFileServerEpisodeSvcServer) DeleteEpisodePoster(context.Context, *DeleteEpisodePosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEpisodePoster not implemented")
}
func (UnimplementedFileServerEpisodeSvcServer) mustEmbedUnimplementedFileServerEpisodeSvcServer() {}

// UnsafeFileServerEpisodeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerEpisodeSvcServer will
// result in compilation errors.
type UnsafeFileServerEpisodeSvcServer interface {
	mustEmbedUnimplementedFileServerEpisodeSvcServer()
}

func RegisterFileServerEpisodeSvcServer(s grpc.ServiceRegistrar, srv FileServerEpisodeSvcServer) {
	s.RegisterService(&FileServerEpisodeSvc_ServiceDesc, srv)
}

func _FileServerEpisodeSvc_UploadEpisodePosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerEpisodeSvcServer).UploadEpisodePosters(&fileServerEpisodeSvcUploadEpisodePostersServer{stream})
}

type FileServerEpisodeSvc_UploadEpisodePostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadEpisodePostersFSRequest, error)
	grpc.ServerStream
}

type fileServerEpisodeSvcUploadEpisodePostersServer struct {
	grpc.ServerStream
}

func (x *fileServerEpisodeSvcUploadEpisodePostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerEpisodeSvcUploadEpisodePostersServer) Recv() (*UploadEpisodePostersFSRequest, error) {
	m := new(UploadEpisodePostersFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerEpisodeSvc_DeleteEpisodePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEpisodePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerEpisodeSvcServer).DeleteEpisodePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerEpisodeSvc/DeleteEpisodePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerEpisodeSvcServer).DeleteEpisodePoster(ctx, req.(*DeleteEpisodePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerEpisodeSvc_ServiceDesc is the grpc.ServiceDesc for FileServerEpisodeSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerEpisodeSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerEpisodeSvc",
	HandlerType: (*FileServerEpisodeSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteEpisodePoster",
			Handler:    _FileServerEpisodeSvc_DeleteEpisodePoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadEpisodePosters",
			Handler:       _FileServerEpisodeSvc_UploadEpisodePosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerCelebritySvcClient is the client API for FileServerCelebritySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerCelebritySvcClient interface {
	UploadCelebrityPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerCelebritySvc_UploadCelebrityPostersClient, error)
	DeleteCelebrityPoster(ctx context.Context, in *DeleteCelebrityPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerCelebritySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerCelebritySvcClient(cc grpc.ClientConnInterface) FileServerCelebritySvcClient {
	return &fileServerCelebritySvcClient{cc}
}

func (c *fileServerCelebritySvcClient) UploadCelebrityPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerCelebritySvc_UploadCelebrityPostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerCelebritySvc_ServiceDesc.Streams[0], "/service.FileServerCelebritySvc/UploadCelebrityPosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerCelebritySvcUploadCelebrityPostersClient{stream}
	return x, nil
}

type FileServerCelebritySvc_UploadCelebrityPostersClient interface {
	Send(*UploadCelebrityPostersFSRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerCelebritySvcUploadCelebrityPostersClient struct {
	grpc.ClientStream
}

func (x *fileServerCelebritySvcUploadCelebrityPostersClient) Send(m *UploadCelebrityPostersFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerCelebritySvcUploadCelebrityPostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerCelebritySvcClient) DeleteCelebrityPoster(ctx context.Context, in *DeleteCelebrityPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerCelebritySvc/DeleteCelebrityPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerCelebritySvcServer is the server API for FileServerCelebritySvc service.
// All implementations must embed UnimplementedFileServerCelebritySvcServer
// for forward compatibility
type FileServerCelebritySvcServer interface {
	UploadCelebrityPosters(FileServerCelebritySvc_UploadCelebrityPostersServer) error
	DeleteCelebrityPoster(context.Context, *DeleteCelebrityPosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerCelebritySvcServer()
}

// UnimplementedFileServerCelebritySvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerCelebritySvcServer struct {
}

func (UnimplementedFileServerCelebritySvcServer) UploadCelebrityPosters(FileServerCelebritySvc_UploadCelebrityPostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadCelebrityPosters not implemented")
}
func (UnimplementedFileServerCelebritySvcServer) DeleteCelebrityPoster(context.Context, *DeleteCelebrityPosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCelebrityPoster not implemented")
}
func (UnimplementedFileServerCelebritySvcServer) mustEmbedUnimplementedFileServerCelebritySvcServer() {
}

// UnsafeFileServerCelebritySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerCelebritySvcServer will
// result in compilation errors.
type UnsafeFileServerCelebritySvcServer interface {
	mustEmbedUnimplementedFileServerCelebritySvcServer()
}

func RegisterFileServerCelebritySvcServer(s grpc.ServiceRegistrar, srv FileServerCelebritySvcServer) {
	s.RegisterService(&FileServerCelebritySvc_ServiceDesc, srv)
}

func _FileServerCelebritySvc_UploadCelebrityPosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerCelebritySvcServer).UploadCelebrityPosters(&fileServerCelebritySvcUploadCelebrityPostersServer{stream})
}

type FileServerCelebritySvc_UploadCelebrityPostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadCelebrityPostersFSRequest, error)
	grpc.ServerStream
}

type fileServerCelebritySvcUploadCelebrityPostersServer struct {
	grpc.ServerStream
}

func (x *fileServerCelebritySvcUploadCelebrityPostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerCelebritySvcUploadCelebrityPostersServer) Recv() (*UploadCelebrityPostersFSRequest, error) {
	m := new(UploadCelebrityPostersFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerCelebritySvc_DeleteCelebrityPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCelebrityPosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerCelebritySvcServer).DeleteCelebrityPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerCelebritySvc/DeleteCelebrityPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerCelebritySvcServer).DeleteCelebrityPoster(ctx, req.(*DeleteCelebrityPosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerCelebritySvc_ServiceDesc is the grpc.ServiceDesc for FileServerCelebritySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerCelebritySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerCelebritySvc",
	HandlerType: (*FileServerCelebritySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteCelebrityPoster",
			Handler:    _FileServerCelebritySvc_DeleteCelebrityPoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadCelebrityPosters",
			Handler:       _FileServerCelebritySvc_UploadCelebrityPosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerSeriesSvcClient is the client API for FileServerSeriesSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerSeriesSvcClient interface {
	UploadSeriesPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerSeriesSvc_UploadSeriesPostersClient, error)
	DeleteSeriesPoster(ctx context.Context, in *DeleteSeriesPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerSeriesSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerSeriesSvcClient(cc grpc.ClientConnInterface) FileServerSeriesSvcClient {
	return &fileServerSeriesSvcClient{cc}
}

func (c *fileServerSeriesSvcClient) UploadSeriesPosters(ctx context.Context, opts ...grpc.CallOption) (FileServerSeriesSvc_UploadSeriesPostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerSeriesSvc_ServiceDesc.Streams[0], "/service.FileServerSeriesSvc/UploadSeriesPosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerSeriesSvcUploadSeriesPostersClient{stream}
	return x, nil
}

type FileServerSeriesSvc_UploadSeriesPostersClient interface {
	Send(*UploadSeriesPostersFSRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerSeriesSvcUploadSeriesPostersClient struct {
	grpc.ClientStream
}

func (x *fileServerSeriesSvcUploadSeriesPostersClient) Send(m *UploadSeriesPostersFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerSeriesSvcUploadSeriesPostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerSeriesSvcClient) DeleteSeriesPoster(ctx context.Context, in *DeleteSeriesPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerSeriesSvc/DeleteSeriesPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerSeriesSvcServer is the server API for FileServerSeriesSvc service.
// All implementations must embed UnimplementedFileServerSeriesSvcServer
// for forward compatibility
type FileServerSeriesSvcServer interface {
	UploadSeriesPosters(FileServerSeriesSvc_UploadSeriesPostersServer) error
	DeleteSeriesPoster(context.Context, *DeleteSeriesPosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerSeriesSvcServer()
}

// UnimplementedFileServerSeriesSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerSeriesSvcServer struct {
}

func (UnimplementedFileServerSeriesSvcServer) UploadSeriesPosters(FileServerSeriesSvc_UploadSeriesPostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadSeriesPosters not implemented")
}
func (UnimplementedFileServerSeriesSvcServer) DeleteSeriesPoster(context.Context, *DeleteSeriesPosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeriesPoster not implemented")
}
func (UnimplementedFileServerSeriesSvcServer) mustEmbedUnimplementedFileServerSeriesSvcServer() {}

// UnsafeFileServerSeriesSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerSeriesSvcServer will
// result in compilation errors.
type UnsafeFileServerSeriesSvcServer interface {
	mustEmbedUnimplementedFileServerSeriesSvcServer()
}

func RegisterFileServerSeriesSvcServer(s grpc.ServiceRegistrar, srv FileServerSeriesSvcServer) {
	s.RegisterService(&FileServerSeriesSvc_ServiceDesc, srv)
}

func _FileServerSeriesSvc_UploadSeriesPosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerSeriesSvcServer).UploadSeriesPosters(&fileServerSeriesSvcUploadSeriesPostersServer{stream})
}

type FileServerSeriesSvc_UploadSeriesPostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadSeriesPostersFSRequest, error)
	grpc.ServerStream
}

type fileServerSeriesSvcUploadSeriesPostersServer struct {
	grpc.ServerStream
}

func (x *fileServerSeriesSvcUploadSeriesPostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerSeriesSvcUploadSeriesPostersServer) Recv() (*UploadSeriesPostersFSRequest, error) {
	m := new(UploadSeriesPostersFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerSeriesSvc_DeleteSeriesPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeriesPosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerSeriesSvcServer).DeleteSeriesPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerSeriesSvc/DeleteSeriesPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerSeriesSvcServer).DeleteSeriesPoster(ctx, req.(*DeleteSeriesPosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerSeriesSvc_ServiceDesc is the grpc.ServiceDesc for FileServerSeriesSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerSeriesSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerSeriesSvc",
	HandlerType: (*FileServerSeriesSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteSeriesPoster",
			Handler:    _FileServerSeriesSvc_DeleteSeriesPoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadSeriesPosters",
			Handler:       _FileServerSeriesSvc_UploadSeriesPosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// FileServerMovieSvcClient is the client API for FileServerMovieSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerMovieSvcClient interface {
	UploadMoviePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerMovieSvc_UploadMoviePostersClient, error)
	DeleteMoviePoster(ctx context.Context, in *DeleteMoviePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type fileServerMovieSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerMovieSvcClient(cc grpc.ClientConnInterface) FileServerMovieSvcClient {
	return &fileServerMovieSvcClient{cc}
}

func (c *fileServerMovieSvcClient) UploadMoviePosters(ctx context.Context, opts ...grpc.CallOption) (FileServerMovieSvc_UploadMoviePostersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerMovieSvc_ServiceDesc.Streams[0], "/service.FileServerMovieSvc/UploadMoviePosters", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerMovieSvcUploadMoviePostersClient{stream}
	return x, nil
}

type FileServerMovieSvc_UploadMoviePostersClient interface {
	Send(*UploadMoviePostersFSRequest) error
	CloseAndRecv() (*UploadPosterResponse, error)
	grpc.ClientStream
}

type fileServerMovieSvcUploadMoviePostersClient struct {
	grpc.ClientStream
}

func (x *fileServerMovieSvcUploadMoviePostersClient) Send(m *UploadMoviePostersFSRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerMovieSvcUploadMoviePostersClient) CloseAndRecv() (*UploadPosterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadPosterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServerMovieSvcClient) DeleteMoviePoster(ctx context.Context, in *DeleteMoviePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.FileServerMovieSvc/DeleteMoviePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServerMovieSvcServer is the server API for FileServerMovieSvc service.
// All implementations must embed UnimplementedFileServerMovieSvcServer
// for forward compatibility
type FileServerMovieSvcServer interface {
	UploadMoviePosters(FileServerMovieSvc_UploadMoviePostersServer) error
	DeleteMoviePoster(context.Context, *DeleteMoviePosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedFileServerMovieSvcServer()
}

// UnimplementedFileServerMovieSvcServer must be embedded to have forward compatible implementations.
type UnimplementedFileServerMovieSvcServer struct {
}

func (UnimplementedFileServerMovieSvcServer) UploadMoviePosters(FileServerMovieSvc_UploadMoviePostersServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadMoviePosters not implemented")
}
func (UnimplementedFileServerMovieSvcServer) DeleteMoviePoster(context.Context, *DeleteMoviePosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMoviePoster not implemented")
}
func (UnimplementedFileServerMovieSvcServer) mustEmbedUnimplementedFileServerMovieSvcServer() {}

// UnsafeFileServerMovieSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerMovieSvcServer will
// result in compilation errors.
type UnsafeFileServerMovieSvcServer interface {
	mustEmbedUnimplementedFileServerMovieSvcServer()
}

func RegisterFileServerMovieSvcServer(s grpc.ServiceRegistrar, srv FileServerMovieSvcServer) {
	s.RegisterService(&FileServerMovieSvc_ServiceDesc, srv)
}

func _FileServerMovieSvc_UploadMoviePosters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerMovieSvcServer).UploadMoviePosters(&fileServerMovieSvcUploadMoviePostersServer{stream})
}

type FileServerMovieSvc_UploadMoviePostersServer interface {
	SendAndClose(*UploadPosterResponse) error
	Recv() (*UploadMoviePostersFSRequest, error)
	grpc.ServerStream
}

type fileServerMovieSvcUploadMoviePostersServer struct {
	grpc.ServerStream
}

func (x *fileServerMovieSvcUploadMoviePostersServer) SendAndClose(m *UploadPosterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerMovieSvcUploadMoviePostersServer) Recv() (*UploadMoviePostersFSRequest, error) {
	m := new(UploadMoviePostersFSRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileServerMovieSvc_DeleteMoviePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMoviePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServerMovieSvcServer).DeleteMoviePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.FileServerMovieSvc/DeleteMoviePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServerMovieSvcServer).DeleteMoviePoster(ctx, req.(*DeleteMoviePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileServerMovieSvc_ServiceDesc is the grpc.ServiceDesc for FileServerMovieSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerMovieSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.FileServerMovieSvc",
	HandlerType: (*FileServerMovieSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteMoviePoster",
			Handler:    _FileServerMovieSvc_DeleteMoviePoster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadMoviePosters",
			Handler:       _FileServerMovieSvc_UploadMoviePosters_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

// ArticleSvcClient is the client API for ArticleSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleSvcClient interface {
	CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*Article, error)
	GetArticle(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Article, error)
	UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error)
	ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ArticleListResponse, error)
	ListArticlesByJournalist(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*ArticleListResponse, error)
	UploadArticlePosters(ctx context.Context, in *UploadArticlePostersServiceRequest, opts ...grpc.CallOption) (*Article, error)
	DeleteArticlePoster(ctx context.Context, in *DeleteArticlePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type articleSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleSvcClient(cc grpc.ClientConnInterface) ArticleSvcClient {
	return &articleSvcClient{cc}
}

func (c *articleSvcClient) CreateArticle(ctx context.Context, in *CreateArticleRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/service.ArticleSvc/CreateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSvcClient) GetArticle(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/service.ArticleSvc/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSvcClient) UpdateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/service.ArticleSvc/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSvcClient) ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ArticleListResponse, error) {
	out := new(ArticleListResponse)
	err := c.cc.Invoke(ctx, "/service.ArticleSvc/ListArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSvcClient) ListArticlesByJournalist(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*ArticleListResponse, error) {
	out := new(ArticleListResponse)
	err := c.cc.Invoke(ctx, "/service.ArticleSvc/ListArticlesByJournalist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSvcClient) UploadArticlePosters(ctx context.Context, in *UploadArticlePostersServiceRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/service.ArticleSvc/UploadArticlePosters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleSvcClient) DeleteArticlePoster(ctx context.Context, in *DeleteArticlePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.ArticleSvc/DeleteArticlePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleSvcServer is the server API for ArticleSvc service.
// All implementations must embed UnimplementedArticleSvcServer
// for forward compatibility
type ArticleSvcServer interface {
	CreateArticle(context.Context, *CreateArticleRequest) (*Article, error)
	GetArticle(context.Context, *GetByIDRequest) (*Article, error)
	UpdateArticle(context.Context, *Article) (*Article, error)
	ListArticles(context.Context, *ListArticlesRequest) (*ArticleListResponse, error)
	ListArticlesByJournalist(context.Context, *GetByIDRequest) (*ArticleListResponse, error)
	UploadArticlePosters(context.Context, *UploadArticlePostersServiceRequest) (*Article, error)
	DeleteArticlePoster(context.Context, *DeleteArticlePosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedArticleSvcServer()
}

// UnimplementedArticleSvcServer must be embedded to have forward compatible implementations.
type UnimplementedArticleSvcServer struct {
}

func (UnimplementedArticleSvcServer) CreateArticle(context.Context, *CreateArticleRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedArticleSvcServer) GetArticle(context.Context, *GetByIDRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleSvcServer) UpdateArticle(context.Context, *Article) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleSvcServer) ListArticles(context.Context, *ListArticlesRequest) (*ArticleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticles not implemented")
}
func (UnimplementedArticleSvcServer) ListArticlesByJournalist(context.Context, *GetByIDRequest) (*ArticleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticlesByJournalist not implemented")
}
func (UnimplementedArticleSvcServer) UploadArticlePosters(context.Context, *UploadArticlePostersServiceRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadArticlePosters not implemented")
}
func (UnimplementedArticleSvcServer) DeleteArticlePoster(context.Context, *DeleteArticlePosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticlePoster not implemented")
}
func (UnimplementedArticleSvcServer) mustEmbedUnimplementedArticleSvcServer() {}

// UnsafeArticleSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleSvcServer will
// result in compilation errors.
type UnsafeArticleSvcServer interface {
	mustEmbedUnimplementedArticleSvcServer()
}

func RegisterArticleSvcServer(s grpc.ServiceRegistrar, srv ArticleSvcServer) {
	s.RegisterService(&ArticleSvc_ServiceDesc, srv)
}

func _ArticleSvc_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSvcServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArticleSvc/CreateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSvcServer).CreateArticle(ctx, req.(*CreateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSvc_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSvcServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArticleSvc/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSvcServer).GetArticle(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSvc_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSvcServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArticleSvc/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSvcServer).UpdateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSvc_ListArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSvcServer).ListArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArticleSvc/ListArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSvcServer).ListArticles(ctx, req.(*ListArticlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSvc_ListArticlesByJournalist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSvcServer).ListArticlesByJournalist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArticleSvc/ListArticlesByJournalist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSvcServer).ListArticlesByJournalist(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSvc_UploadArticlePosters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadArticlePostersServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSvcServer).UploadArticlePosters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArticleSvc/UploadArticlePosters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSvcServer).UploadArticlePosters(ctx, req.(*UploadArticlePostersServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticleSvc_DeleteArticlePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticlePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleSvcServer).DeleteArticlePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ArticleSvc/DeleteArticlePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleSvcServer).DeleteArticlePoster(ctx, req.(*DeleteArticlePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleSvc_ServiceDesc is the grpc.ServiceDesc for ArticleSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ArticleSvc",
	HandlerType: (*ArticleSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArticle",
			Handler:    _ArticleSvc_CreateArticle_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _ArticleSvc_GetArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _ArticleSvc_UpdateArticle_Handler,
		},
		{
			MethodName: "ListArticles",
			Handler:    _ArticleSvc_ListArticles_Handler,
		},
		{
			MethodName: "ListArticlesByJournalist",
			Handler:    _ArticleSvc_ListArticlesByJournalist_Handler,
		},
		{
			MethodName: "UploadArticlePosters",
			Handler:    _ArticleSvc_UploadArticlePosters_Handler,
		},
		{
			MethodName: "DeleteArticlePoster",
			Handler:    _ArticleSvc_DeleteArticlePoster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// CelebritySvcClient is the client API for CelebritySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CelebritySvcClient interface {
	CreateCelebrity(ctx context.Context, in *CreateCelebrityRequest, opts ...grpc.CallOption) (*Celebrity, error)
	GetCelebrity(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Celebrity, error)
	UpdateCelebrity(ctx context.Context, in *Celebrity, opts ...grpc.CallOption) (*Celebrity, error)
	UploadCelebrityPosters(ctx context.Context, in *UploadCelebrityPostersServiceRequest, opts ...grpc.CallOption) (*Celebrity, error)
	DeleteCelebrityPoster(ctx context.Context, in *DeleteCelebrityPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListCelebrities(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*CelebrityListResponse, error)
}

type celebritySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewCelebritySvcClient(cc grpc.ClientConnInterface) CelebritySvcClient {
	return &celebritySvcClient{cc}
}

func (c *celebritySvcClient) CreateCelebrity(ctx context.Context, in *CreateCelebrityRequest, opts ...grpc.CallOption) (*Celebrity, error) {
	out := new(Celebrity)
	err := c.cc.Invoke(ctx, "/service.CelebritySvc/CreateCelebrity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celebritySvcClient) GetCelebrity(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Celebrity, error) {
	out := new(Celebrity)
	err := c.cc.Invoke(ctx, "/service.CelebritySvc/GetCelebrity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celebritySvcClient) UpdateCelebrity(ctx context.Context, in *Celebrity, opts ...grpc.CallOption) (*Celebrity, error) {
	out := new(Celebrity)
	err := c.cc.Invoke(ctx, "/service.CelebritySvc/UpdateCelebrity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celebritySvcClient) UploadCelebrityPosters(ctx context.Context, in *UploadCelebrityPostersServiceRequest, opts ...grpc.CallOption) (*Celebrity, error) {
	out := new(Celebrity)
	err := c.cc.Invoke(ctx, "/service.CelebritySvc/UploadCelebrityPosters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celebritySvcClient) DeleteCelebrityPoster(ctx context.Context, in *DeleteCelebrityPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.CelebritySvc/DeleteCelebrityPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celebritySvcClient) ListCelebrities(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*CelebrityListResponse, error) {
	out := new(CelebrityListResponse)
	err := c.cc.Invoke(ctx, "/service.CelebritySvc/ListCelebrities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CelebritySvcServer is the server API for CelebritySvc service.
// All implementations must embed UnimplementedCelebritySvcServer
// for forward compatibility
type CelebritySvcServer interface {
	CreateCelebrity(context.Context, *CreateCelebrityRequest) (*Celebrity, error)
	GetCelebrity(context.Context, *GetByIDRequest) (*Celebrity, error)
	UpdateCelebrity(context.Context, *Celebrity) (*Celebrity, error)
	UploadCelebrityPosters(context.Context, *UploadCelebrityPostersServiceRequest) (*Celebrity, error)
	DeleteCelebrityPoster(context.Context, *DeleteCelebrityPosterRequest) (*EmptyResponse, error)
	ListCelebrities(context.Context, *GetAllRequest) (*CelebrityListResponse, error)
	mustEmbedUnimplementedCelebritySvcServer()
}

// UnimplementedCelebritySvcServer must be embedded to have forward compatible implementations.
type UnimplementedCelebritySvcServer struct {
}

func (UnimplementedCelebritySvcServer) CreateCelebrity(context.Context, *CreateCelebrityRequest) (*Celebrity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCelebrity not implemented")
}
func (UnimplementedCelebritySvcServer) GetCelebrity(context.Context, *GetByIDRequest) (*Celebrity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCelebrity not implemented")
}
func (UnimplementedCelebritySvcServer) UpdateCelebrity(context.Context, *Celebrity) (*Celebrity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCelebrity not implemented")
}
func (UnimplementedCelebritySvcServer) UploadCelebrityPosters(context.Context, *UploadCelebrityPostersServiceRequest) (*Celebrity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCelebrityPosters not implemented")
}
func (UnimplementedCelebritySvcServer) DeleteCelebrityPoster(context.Context, *DeleteCelebrityPosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCelebrityPoster not implemented")
}
func (UnimplementedCelebritySvcServer) ListCelebrities(context.Context, *GetAllRequest) (*CelebrityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCelebrities not implemented")
}
func (UnimplementedCelebritySvcServer) mustEmbedUnimplementedCelebritySvcServer() {}

// UnsafeCelebritySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CelebritySvcServer will
// result in compilation errors.
type UnsafeCelebritySvcServer interface {
	mustEmbedUnimplementedCelebritySvcServer()
}

func RegisterCelebritySvcServer(s grpc.ServiceRegistrar, srv CelebritySvcServer) {
	s.RegisterService(&CelebritySvc_ServiceDesc, srv)
}

func _CelebritySvc_CreateCelebrity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCelebrityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelebritySvcServer).CreateCelebrity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CelebritySvc/CreateCelebrity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelebritySvcServer).CreateCelebrity(ctx, req.(*CreateCelebrityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CelebritySvc_GetCelebrity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelebritySvcServer).GetCelebrity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CelebritySvc/GetCelebrity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelebritySvcServer).GetCelebrity(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CelebritySvc_UpdateCelebrity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Celebrity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelebritySvcServer).UpdateCelebrity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CelebritySvc/UpdateCelebrity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelebritySvcServer).UpdateCelebrity(ctx, req.(*Celebrity))
	}
	return interceptor(ctx, in, info, handler)
}

func _CelebritySvc_UploadCelebrityPosters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCelebrityPostersServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelebritySvcServer).UploadCelebrityPosters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CelebritySvc/UploadCelebrityPosters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelebritySvcServer).UploadCelebrityPosters(ctx, req.(*UploadCelebrityPostersServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CelebritySvc_DeleteCelebrityPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCelebrityPosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelebritySvcServer).DeleteCelebrityPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CelebritySvc/DeleteCelebrityPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelebritySvcServer).DeleteCelebrityPoster(ctx, req.(*DeleteCelebrityPosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CelebritySvc_ListCelebrities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelebritySvcServer).ListCelebrities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.CelebritySvc/ListCelebrities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelebritySvcServer).ListCelebrities(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CelebritySvc_ServiceDesc is the grpc.ServiceDesc for CelebritySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CelebritySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.CelebritySvc",
	HandlerType: (*CelebritySvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCelebrity",
			Handler:    _CelebritySvc_CreateCelebrity_Handler,
		},
		{
			MethodName: "GetCelebrity",
			Handler:    _CelebritySvc_GetCelebrity_Handler,
		},
		{
			MethodName: "UpdateCelebrity",
			Handler:    _CelebritySvc_UpdateCelebrity_Handler,
		},
		{
			MethodName: "UploadCelebrityPosters",
			Handler:    _CelebritySvc_UploadCelebrityPosters_Handler,
		},
		{
			MethodName: "DeleteCelebrityPoster",
			Handler:    _CelebritySvc_DeleteCelebrityPoster_Handler,
		},
		{
			MethodName: "ListCelebrities",
			Handler:    _CelebritySvc_ListCelebrities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// EpisodeSvcClient is the client API for EpisodeSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EpisodeSvcClient interface {
	CreateEpisode(ctx context.Context, in *CreateEpisodeRequest, opts ...grpc.CallOption) (*Episode, error)
	GetEpisode(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Episode, error)
	UpdateEpisode(ctx context.Context, in *Episode, opts ...grpc.CallOption) (*Episode, error)
	UploadEpisodePosters(ctx context.Context, in *UploadEpisodePostersServiceRequest, opts ...grpc.CallOption) (*Episode, error)
	DeleteEpisodePoster(ctx context.Context, in *DeleteEpisodePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListSeasonEpisodes(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*ListEpisodeResponse, error)
	ListCollectionEpisodes(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*ListEpisodeResponse, error)
}

type episodeSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewEpisodeSvcClient(cc grpc.ClientConnInterface) EpisodeSvcClient {
	return &episodeSvcClient{cc}
}

func (c *episodeSvcClient) CreateEpisode(ctx context.Context, in *CreateEpisodeRequest, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/service.EpisodeSvc/CreateEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeSvcClient) GetEpisode(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/service.EpisodeSvc/GetEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeSvcClient) UpdateEpisode(ctx context.Context, in *Episode, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/service.EpisodeSvc/UpdateEpisode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeSvcClient) UploadEpisodePosters(ctx context.Context, in *UploadEpisodePostersServiceRequest, opts ...grpc.CallOption) (*Episode, error) {
	out := new(Episode)
	err := c.cc.Invoke(ctx, "/service.EpisodeSvc/UploadEpisodePosters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeSvcClient) DeleteEpisodePoster(ctx context.Context, in *DeleteEpisodePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.EpisodeSvc/DeleteEpisodePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeSvcClient) ListSeasonEpisodes(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*ListEpisodeResponse, error) {
	out := new(ListEpisodeResponse)
	err := c.cc.Invoke(ctx, "/service.EpisodeSvc/ListSeasonEpisodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *episodeSvcClient) ListCollectionEpisodes(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*ListEpisodeResponse, error) {
	out := new(ListEpisodeResponse)
	err := c.cc.Invoke(ctx, "/service.EpisodeSvc/ListCollectionEpisodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EpisodeSvcServer is the server API for EpisodeSvc service.
// All implementations must embed UnimplementedEpisodeSvcServer
// for forward compatibility
type EpisodeSvcServer interface {
	CreateEpisode(context.Context, *CreateEpisodeRequest) (*Episode, error)
	GetEpisode(context.Context, *GetByIDRequest) (*Episode, error)
	UpdateEpisode(context.Context, *Episode) (*Episode, error)
	UploadEpisodePosters(context.Context, *UploadEpisodePostersServiceRequest) (*Episode, error)
	DeleteEpisodePoster(context.Context, *DeleteEpisodePosterRequest) (*EmptyResponse, error)
	ListSeasonEpisodes(context.Context, *GetByIDRequest) (*ListEpisodeResponse, error)
	ListCollectionEpisodes(context.Context, *GetAllRequest) (*ListEpisodeResponse, error)
	mustEmbedUnimplementedEpisodeSvcServer()
}

// UnimplementedEpisodeSvcServer must be embedded to have forward compatible implementations.
type UnimplementedEpisodeSvcServer struct {
}

func (UnimplementedEpisodeSvcServer) CreateEpisode(context.Context, *CreateEpisodeRequest) (*Episode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEpisode not implemented")
}
func (UnimplementedEpisodeSvcServer) GetEpisode(context.Context, *GetByIDRequest) (*Episode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEpisode not implemented")
}
func (UnimplementedEpisodeSvcServer) UpdateEpisode(context.Context, *Episode) (*Episode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEpisode not implemented")
}
func (UnimplementedEpisodeSvcServer) UploadEpisodePosters(context.Context, *UploadEpisodePostersServiceRequest) (*Episode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadEpisodePosters not implemented")
}
func (UnimplementedEpisodeSvcServer) DeleteEpisodePoster(context.Context, *DeleteEpisodePosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEpisodePoster not implemented")
}
func (UnimplementedEpisodeSvcServer) ListSeasonEpisodes(context.Context, *GetByIDRequest) (*ListEpisodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeasonEpisodes not implemented")
}
func (UnimplementedEpisodeSvcServer) ListCollectionEpisodes(context.Context, *GetAllRequest) (*ListEpisodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionEpisodes not implemented")
}
func (UnimplementedEpisodeSvcServer) mustEmbedUnimplementedEpisodeSvcServer() {}

// UnsafeEpisodeSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EpisodeSvcServer will
// result in compilation errors.
type UnsafeEpisodeSvcServer interface {
	mustEmbedUnimplementedEpisodeSvcServer()
}

func RegisterEpisodeSvcServer(s grpc.ServiceRegistrar, srv EpisodeSvcServer) {
	s.RegisterService(&EpisodeSvc_ServiceDesc, srv)
}

func _EpisodeSvc_CreateEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeSvcServer).CreateEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.EpisodeSvc/CreateEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeSvcServer).CreateEpisode(ctx, req.(*CreateEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeSvc_GetEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeSvcServer).GetEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.EpisodeSvc/GetEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeSvcServer).GetEpisode(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeSvc_UpdateEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Episode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeSvcServer).UpdateEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.EpisodeSvc/UpdateEpisode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeSvcServer).UpdateEpisode(ctx, req.(*Episode))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeSvc_UploadEpisodePosters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadEpisodePostersServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeSvcServer).UploadEpisodePosters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.EpisodeSvc/UploadEpisodePosters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeSvcServer).UploadEpisodePosters(ctx, req.(*UploadEpisodePostersServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeSvc_DeleteEpisodePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEpisodePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeSvcServer).DeleteEpisodePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.EpisodeSvc/DeleteEpisodePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeSvcServer).DeleteEpisodePoster(ctx, req.(*DeleteEpisodePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeSvc_ListSeasonEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeSvcServer).ListSeasonEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.EpisodeSvc/ListSeasonEpisodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeSvcServer).ListSeasonEpisodes(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EpisodeSvc_ListCollectionEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EpisodeSvcServer).ListCollectionEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.EpisodeSvc/ListCollectionEpisodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EpisodeSvcServer).ListCollectionEpisodes(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EpisodeSvc_ServiceDesc is the grpc.ServiceDesc for EpisodeSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EpisodeSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.EpisodeSvc",
	HandlerType: (*EpisodeSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEpisode",
			Handler:    _EpisodeSvc_CreateEpisode_Handler,
		},
		{
			MethodName: "GetEpisode",
			Handler:    _EpisodeSvc_GetEpisode_Handler,
		},
		{
			MethodName: "UpdateEpisode",
			Handler:    _EpisodeSvc_UpdateEpisode_Handler,
		},
		{
			MethodName: "UploadEpisodePosters",
			Handler:    _EpisodeSvc_UploadEpisodePosters_Handler,
		},
		{
			MethodName: "DeleteEpisodePoster",
			Handler:    _EpisodeSvc_DeleteEpisodePoster_Handler,
		},
		{
			MethodName: "ListSeasonEpisodes",
			Handler:    _EpisodeSvc_ListSeasonEpisodes_Handler,
		},
		{
			MethodName: "ListCollectionEpisodes",
			Handler:    _EpisodeSvc_ListCollectionEpisodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// ShowSvcClient is the client API for ShowSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShowSvcClient interface {
	CreateShow(ctx context.Context, in *CreateShowRequest, opts ...grpc.CallOption) (*Show, error)
	GetShow(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Show, error)
	UpdateShow(ctx context.Context, in *Show, opts ...grpc.CallOption) (*Show, error)
	ListShows(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*ShowListResponse, error)
	UploadSeriesPosters(ctx context.Context, in *UploadSeriesPostersServiceRequest, opts ...grpc.CallOption) (*Show, error)
	DeleteSeriesPoster(ctx context.Context, in *DeleteSeriesPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	UploadMoviePosters(ctx context.Context, in *UploadMoviePostersServiceRequest, opts ...grpc.CallOption) (*Show, error)
	DeleteMoviePoster(ctx context.Context, in *DeleteMoviePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type showSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewShowSvcClient(cc grpc.ClientConnInterface) ShowSvcClient {
	return &showSvcClient{cc}
}

func (c *showSvcClient) CreateShow(ctx context.Context, in *CreateShowRequest, opts ...grpc.CallOption) (*Show, error) {
	out := new(Show)
	err := c.cc.Invoke(ctx, "/service.ShowSvc/CreateShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSvcClient) GetShow(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Show, error) {
	out := new(Show)
	err := c.cc.Invoke(ctx, "/service.ShowSvc/GetShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSvcClient) UpdateShow(ctx context.Context, in *Show, opts ...grpc.CallOption) (*Show, error) {
	out := new(Show)
	err := c.cc.Invoke(ctx, "/service.ShowSvc/UpdateShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSvcClient) ListShows(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*ShowListResponse, error) {
	out := new(ShowListResponse)
	err := c.cc.Invoke(ctx, "/service.ShowSvc/ListShows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSvcClient) UploadSeriesPosters(ctx context.Context, in *UploadSeriesPostersServiceRequest, opts ...grpc.CallOption) (*Show, error) {
	out := new(Show)
	err := c.cc.Invoke(ctx, "/service.ShowSvc/UploadSeriesPosters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSvcClient) DeleteSeriesPoster(ctx context.Context, in *DeleteSeriesPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.ShowSvc/DeleteSeriesPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSvcClient) UploadMoviePosters(ctx context.Context, in *UploadMoviePostersServiceRequest, opts ...grpc.CallOption) (*Show, error) {
	out := new(Show)
	err := c.cc.Invoke(ctx, "/service.ShowSvc/UploadMoviePosters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showSvcClient) DeleteMoviePoster(ctx context.Context, in *DeleteMoviePosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.ShowSvc/DeleteMoviePoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowSvcServer is the server API for ShowSvc service.
// All implementations must embed UnimplementedShowSvcServer
// for forward compatibility
type ShowSvcServer interface {
	CreateShow(context.Context, *CreateShowRequest) (*Show, error)
	GetShow(context.Context, *GetByIDRequest) (*Show, error)
	UpdateShow(context.Context, *Show) (*Show, error)
	ListShows(context.Context, *GetAllRequest) (*ShowListResponse, error)
	UploadSeriesPosters(context.Context, *UploadSeriesPostersServiceRequest) (*Show, error)
	DeleteSeriesPoster(context.Context, *DeleteSeriesPosterRequest) (*EmptyResponse, error)
	UploadMoviePosters(context.Context, *UploadMoviePostersServiceRequest) (*Show, error)
	DeleteMoviePoster(context.Context, *DeleteMoviePosterRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedShowSvcServer()
}

// UnimplementedShowSvcServer must be embedded to have forward compatible implementations.
type UnimplementedShowSvcServer struct {
}

func (UnimplementedShowSvcServer) CreateShow(context.Context, *CreateShowRequest) (*Show, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShow not implemented")
}
func (UnimplementedShowSvcServer) GetShow(context.Context, *GetByIDRequest) (*Show, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShow not implemented")
}
func (UnimplementedShowSvcServer) UpdateShow(context.Context, *Show) (*Show, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShow not implemented")
}
func (UnimplementedShowSvcServer) ListShows(context.Context, *GetAllRequest) (*ShowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShows not implemented")
}
func (UnimplementedShowSvcServer) UploadSeriesPosters(context.Context, *UploadSeriesPostersServiceRequest) (*Show, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSeriesPosters not implemented")
}
func (UnimplementedShowSvcServer) DeleteSeriesPoster(context.Context, *DeleteSeriesPosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeriesPoster not implemented")
}
func (UnimplementedShowSvcServer) UploadMoviePosters(context.Context, *UploadMoviePostersServiceRequest) (*Show, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMoviePosters not implemented")
}
func (UnimplementedShowSvcServer) DeleteMoviePoster(context.Context, *DeleteMoviePosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMoviePoster not implemented")
}
func (UnimplementedShowSvcServer) mustEmbedUnimplementedShowSvcServer() {}

// UnsafeShowSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShowSvcServer will
// result in compilation errors.
type UnsafeShowSvcServer interface {
	mustEmbedUnimplementedShowSvcServer()
}

func RegisterShowSvcServer(s grpc.ServiceRegistrar, srv ShowSvcServer) {
	s.RegisterService(&ShowSvc_ServiceDesc, srv)
}

func _ShowSvc_CreateShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSvcServer).CreateShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ShowSvc/CreateShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSvcServer).CreateShow(ctx, req.(*CreateShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowSvc_GetShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSvcServer).GetShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ShowSvc/GetShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSvcServer).GetShow(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowSvc_UpdateShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Show)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSvcServer).UpdateShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ShowSvc/UpdateShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSvcServer).UpdateShow(ctx, req.(*Show))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowSvc_ListShows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSvcServer).ListShows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ShowSvc/ListShows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSvcServer).ListShows(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowSvc_UploadSeriesPosters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSeriesPostersServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSvcServer).UploadSeriesPosters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ShowSvc/UploadSeriesPosters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSvcServer).UploadSeriesPosters(ctx, req.(*UploadSeriesPostersServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowSvc_DeleteSeriesPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeriesPosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSvcServer).DeleteSeriesPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ShowSvc/DeleteSeriesPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSvcServer).DeleteSeriesPoster(ctx, req.(*DeleteSeriesPosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowSvc_UploadMoviePosters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMoviePostersServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSvcServer).UploadMoviePosters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ShowSvc/UploadMoviePosters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSvcServer).UploadMoviePosters(ctx, req.(*UploadMoviePostersServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowSvc_DeleteMoviePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMoviePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowSvcServer).DeleteMoviePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ShowSvc/DeleteMoviePoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowSvcServer).DeleteMoviePoster(ctx, req.(*DeleteMoviePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShowSvc_ServiceDesc is the grpc.ServiceDesc for ShowSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShowSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ShowSvc",
	HandlerType: (*ShowSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShow",
			Handler:    _ShowSvc_CreateShow_Handler,
		},
		{
			MethodName: "GetShow",
			Handler:    _ShowSvc_GetShow_Handler,
		},
		{
			MethodName: "UpdateShow",
			Handler:    _ShowSvc_UpdateShow_Handler,
		},
		{
			MethodName: "ListShows",
			Handler:    _ShowSvc_ListShows_Handler,
		},
		{
			MethodName: "UploadSeriesPosters",
			Handler:    _ShowSvc_UploadSeriesPosters_Handler,
		},
		{
			MethodName: "DeleteSeriesPoster",
			Handler:    _ShowSvc_DeleteSeriesPoster_Handler,
		},
		{
			MethodName: "UploadMoviePosters",
			Handler:    _ShowSvc_UploadMoviePosters_Handler,
		},
		{
			MethodName: "DeleteMoviePoster",
			Handler:    _ShowSvc_DeleteMoviePoster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// GenreSvcClient is the client API for GenreSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenreSvcClient interface {
	CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*Genre, error)
	GetGenre(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Genre, error)
	UpdateGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*Genre, error)
	ListGenres(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GenreListResponse, error)
	GetGenreByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*Genre, error)
}

type genreSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewGenreSvcClient(cc grpc.ClientConnInterface) GenreSvcClient {
	return &genreSvcClient{cc}
}

func (c *genreSvcClient) CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*Genre, error) {
	out := new(Genre)
	err := c.cc.Invoke(ctx, "/service.GenreSvc/CreateGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreSvcClient) GetGenre(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Genre, error) {
	out := new(Genre)
	err := c.cc.Invoke(ctx, "/service.GenreSvc/GetGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreSvcClient) UpdateGenre(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*Genre, error) {
	out := new(Genre)
	err := c.cc.Invoke(ctx, "/service.GenreSvc/UpdateGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreSvcClient) ListGenres(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GenreListResponse, error) {
	out := new(GenreListResponse)
	err := c.cc.Invoke(ctx, "/service.GenreSvc/ListGenres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreSvcClient) GetGenreByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*Genre, error) {
	out := new(Genre)
	err := c.cc.Invoke(ctx, "/service.GenreSvc/GetGenreByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenreSvcServer is the server API for GenreSvc service.
// All implementations must embed UnimplementedGenreSvcServer
// for forward compatibility
type GenreSvcServer interface {
	CreateGenre(context.Context, *CreateGenreRequest) (*Genre, error)
	GetGenre(context.Context, *GetByIDRequest) (*Genre, error)
	UpdateGenre(context.Context, *Genre) (*Genre, error)
	ListGenres(context.Context, *GetAllRequest) (*GenreListResponse, error)
	GetGenreByName(context.Context, *GetByNameRequest) (*Genre, error)
	mustEmbedUnimplementedGenreSvcServer()
}

// UnimplementedGenreSvcServer must be embedded to have forward compatible implementations.
type UnimplementedGenreSvcServer struct {
}

func (UnimplementedGenreSvcServer) CreateGenre(context.Context, *CreateGenreRequest) (*Genre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenre not implemented")
}
func (UnimplementedGenreSvcServer) GetGenre(context.Context, *GetByIDRequest) (*Genre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenre not implemented")
}
func (UnimplementedGenreSvcServer) UpdateGenre(context.Context, *Genre) (*Genre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGenre not implemented")
}
func (UnimplementedGenreSvcServer) ListGenres(context.Context, *GetAllRequest) (*GenreListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGenres not implemented")
}
func (UnimplementedGenreSvcServer) GetGenreByName(context.Context, *GetByNameRequest) (*Genre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenreByName not implemented")
}
func (UnimplementedGenreSvcServer) mustEmbedUnimplementedGenreSvcServer() {}

// UnsafeGenreSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenreSvcServer will
// result in compilation errors.
type UnsafeGenreSvcServer interface {
	mustEmbedUnimplementedGenreSvcServer()
}

func RegisterGenreSvcServer(s grpc.ServiceRegistrar, srv GenreSvcServer) {
	s.RegisterService(&GenreSvc_ServiceDesc, srv)
}

func _GenreSvc_CreateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreSvcServer).CreateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GenreSvc/CreateGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreSvcServer).CreateGenre(ctx, req.(*CreateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreSvc_GetGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreSvcServer).GetGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GenreSvc/GetGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreSvcServer).GetGenre(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreSvc_UpdateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Genre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreSvcServer).UpdateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GenreSvc/UpdateGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreSvcServer).UpdateGenre(ctx, req.(*Genre))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreSvc_ListGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreSvcServer).ListGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GenreSvc/ListGenres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreSvcServer).ListGenres(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreSvc_GetGenreByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreSvcServer).GetGenreByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.GenreSvc/GetGenreByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreSvcServer).GetGenreByName(ctx, req.(*GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenreSvc_ServiceDesc is the grpc.ServiceDesc for GenreSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenreSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.GenreSvc",
	HandlerType: (*GenreSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGenre",
			Handler:    _GenreSvc_CreateGenre_Handler,
		},
		{
			MethodName: "GetGenre",
			Handler:    _GenreSvc_GetGenre_Handler,
		},
		{
			MethodName: "UpdateGenre",
			Handler:    _GenreSvc_UpdateGenre_Handler,
		},
		{
			MethodName: "ListGenres",
			Handler:    _GenreSvc_ListGenres_Handler,
		},
		{
			MethodName: "GetGenreByName",
			Handler:    _GenreSvc_GetGenreByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// SeasonSvcClient is the client API for SeasonSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeasonSvcClient interface {
	CreateSeason(ctx context.Context, in *CreateSeasonRequest, opts ...grpc.CallOption) (*Season, error)
	GetSeason(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Season, error)
	UpdateSeason(ctx context.Context, in *Season, opts ...grpc.CallOption) (*Season, error)
	UploadSeasonPosters(ctx context.Context, in *UploadSeasonPostersServiceRequest, opts ...grpc.CallOption) (*Season, error)
	DeleteSeasonPoster(ctx context.Context, in *DeleteSeasonPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListShowSeasons(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*ListSeasonResponse, error)
	ListSeasonsCollection(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*ListSeasonResponse, error)
}

type seasonSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSeasonSvcClient(cc grpc.ClientConnInterface) SeasonSvcClient {
	return &seasonSvcClient{cc}
}

func (c *seasonSvcClient) CreateSeason(ctx context.Context, in *CreateSeasonRequest, opts ...grpc.CallOption) (*Season, error) {
	out := new(Season)
	err := c.cc.Invoke(ctx, "/service.SeasonSvc/CreateSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonSvcClient) GetSeason(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Season, error) {
	out := new(Season)
	err := c.cc.Invoke(ctx, "/service.SeasonSvc/GetSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonSvcClient) UpdateSeason(ctx context.Context, in *Season, opts ...grpc.CallOption) (*Season, error) {
	out := new(Season)
	err := c.cc.Invoke(ctx, "/service.SeasonSvc/UpdateSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonSvcClient) UploadSeasonPosters(ctx context.Context, in *UploadSeasonPostersServiceRequest, opts ...grpc.CallOption) (*Season, error) {
	out := new(Season)
	err := c.cc.Invoke(ctx, "/service.SeasonSvc/UploadSeasonPosters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonSvcClient) DeleteSeasonPoster(ctx context.Context, in *DeleteSeasonPosterRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/service.SeasonSvc/DeleteSeasonPoster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonSvcClient) ListShowSeasons(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*ListSeasonResponse, error) {
	out := new(ListSeasonResponse)
	err := c.cc.Invoke(ctx, "/service.SeasonSvc/ListShowSeasons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seasonSvcClient) ListSeasonsCollection(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*ListSeasonResponse, error) {
	out := new(ListSeasonResponse)
	err := c.cc.Invoke(ctx, "/service.SeasonSvc/ListSeasonsCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeasonSvcServer is the server API for SeasonSvc service.
// All implementations must embed UnimplementedSeasonSvcServer
// for forward compatibility
type SeasonSvcServer interface {
	CreateSeason(context.Context, *CreateSeasonRequest) (*Season, error)
	GetSeason(context.Context, *GetByIDRequest) (*Season, error)
	UpdateSeason(context.Context, *Season) (*Season, error)
	UploadSeasonPosters(context.Context, *UploadSeasonPostersServiceRequest) (*Season, error)
	DeleteSeasonPoster(context.Context, *DeleteSeasonPosterRequest) (*EmptyResponse, error)
	ListShowSeasons(context.Context, *GetByIDRequest) (*ListSeasonResponse, error)
	ListSeasonsCollection(context.Context, *GetAllRequest) (*ListSeasonResponse, error)
	mustEmbedUnimplementedSeasonSvcServer()
}

// UnimplementedSeasonSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSeasonSvcServer struct {
}

func (UnimplementedSeasonSvcServer) CreateSeason(context.Context, *CreateSeasonRequest) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeason not implemented")
}
func (UnimplementedSeasonSvcServer) GetSeason(context.Context, *GetByIDRequest) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeason not implemented")
}
func (UnimplementedSeasonSvcServer) UpdateSeason(context.Context, *Season) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeason not implemented")
}
func (UnimplementedSeasonSvcServer) UploadSeasonPosters(context.Context, *UploadSeasonPostersServiceRequest) (*Season, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSeasonPosters not implemented")
}
func (UnimplementedSeasonSvcServer) DeleteSeasonPoster(context.Context, *DeleteSeasonPosterRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeasonPoster not implemented")
}
func (UnimplementedSeasonSvcServer) ListShowSeasons(context.Context, *GetByIDRequest) (*ListSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShowSeasons not implemented")
}
func (UnimplementedSeasonSvcServer) ListSeasonsCollection(context.Context, *GetAllRequest) (*ListSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeasonsCollection not implemented")
}
func (UnimplementedSeasonSvcServer) mustEmbedUnimplementedSeasonSvcServer() {}

// UnsafeSeasonSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeasonSvcServer will
// result in compilation errors.
type UnsafeSeasonSvcServer interface {
	mustEmbedUnimplementedSeasonSvcServer()
}

func RegisterSeasonSvcServer(s grpc.ServiceRegistrar, srv SeasonSvcServer) {
	s.RegisterService(&SeasonSvc_ServiceDesc, srv)
}

func _SeasonSvc_CreateSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonSvcServer).CreateSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SeasonSvc/CreateSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonSvcServer).CreateSeason(ctx, req.(*CreateSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonSvc_GetSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonSvcServer).GetSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SeasonSvc/GetSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonSvcServer).GetSeason(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonSvc_UpdateSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Season)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonSvcServer).UpdateSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SeasonSvc/UpdateSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonSvcServer).UpdateSeason(ctx, req.(*Season))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonSvc_UploadSeasonPosters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSeasonPostersServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonSvcServer).UploadSeasonPosters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SeasonSvc/UploadSeasonPosters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonSvcServer).UploadSeasonPosters(ctx, req.(*UploadSeasonPostersServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonSvc_DeleteSeasonPoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeasonPosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonSvcServer).DeleteSeasonPoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SeasonSvc/DeleteSeasonPoster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonSvcServer).DeleteSeasonPoster(ctx, req.(*DeleteSeasonPosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonSvc_ListShowSeasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonSvcServer).ListShowSeasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SeasonSvc/ListShowSeasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonSvcServer).ListShowSeasons(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeasonSvc_ListSeasonsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonSvcServer).ListSeasonsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.SeasonSvc/ListSeasonsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonSvcServer).ListSeasonsCollection(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeasonSvc_ServiceDesc is the grpc.ServiceDesc for SeasonSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeasonSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.SeasonSvc",
	HandlerType: (*SeasonSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeason",
			Handler:    _SeasonSvc_CreateSeason_Handler,
		},
		{
			MethodName: "GetSeason",
			Handler:    _SeasonSvc_GetSeason_Handler,
		},
		{
			MethodName: "UpdateSeason",
			Handler:    _SeasonSvc_UpdateSeason_Handler,
		},
		{
			MethodName: "UploadSeasonPosters",
			Handler:    _SeasonSvc_UploadSeasonPosters_Handler,
		},
		{
			MethodName: "DeleteSeasonPoster",
			Handler:    _SeasonSvc_DeleteSeasonPoster_Handler,
		},
		{
			MethodName: "ListShowSeasons",
			Handler:    _SeasonSvc_ListShowSeasons_Handler,
		},
		{
			MethodName: "ListSeasonsCollection",
			Handler:    _SeasonSvc_ListSeasonsCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// JournalistSvcClient is the client API for JournalistSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JournalistSvcClient interface {
	CreateJournalist(ctx context.Context, in *CreateJournalistRequest, opts ...grpc.CallOption) (*Journalist, error)
	GetJournalist(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Journalist, error)
	UpdateJournalist(ctx context.Context, in *Journalist, opts ...grpc.CallOption) (*Journalist, error)
	ListJournalists(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*JournalistListResponse, error)
	GetJournalistByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*Journalist, error)
}

type journalistSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewJournalistSvcClient(cc grpc.ClientConnInterface) JournalistSvcClient {
	return &journalistSvcClient{cc}
}

func (c *journalistSvcClient) CreateJournalist(ctx context.Context, in *CreateJournalistRequest, opts ...grpc.CallOption) (*Journalist, error) {
	out := new(Journalist)
	err := c.cc.Invoke(ctx, "/service.JournalistSvc/CreateJournalist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalistSvcClient) GetJournalist(ctx context.Context, in *GetByIDRequest, opts ...grpc.CallOption) (*Journalist, error) {
	out := new(Journalist)
	err := c.cc.Invoke(ctx, "/service.JournalistSvc/GetJournalist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalistSvcClient) UpdateJournalist(ctx context.Context, in *Journalist, opts ...grpc.CallOption) (*Journalist, error) {
	out := new(Journalist)
	err := c.cc.Invoke(ctx, "/service.JournalistSvc/UpdateJournalist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalistSvcClient) ListJournalists(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*JournalistListResponse, error) {
	out := new(JournalistListResponse)
	err := c.cc.Invoke(ctx, "/service.JournalistSvc/ListJournalists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalistSvcClient) GetJournalistByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*Journalist, error) {
	out := new(Journalist)
	err := c.cc.Invoke(ctx, "/service.JournalistSvc/GetJournalistByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JournalistSvcServer is the server API for JournalistSvc service.
// All implementations must embed UnimplementedJournalistSvcServer
// for forward compatibility
type JournalistSvcServer interface {
	CreateJournalist(context.Context, *CreateJournalistRequest) (*Journalist, error)
	GetJournalist(context.Context, *GetByIDRequest) (*Journalist, error)
	UpdateJournalist(context.Context, *Journalist) (*Journalist, error)
	ListJournalists(context.Context, *GetAllRequest) (*JournalistListResponse, error)
	GetJournalistByName(context.Context, *GetByNameRequest) (*Journalist, error)
	mustEmbedUnimplementedJournalistSvcServer()
}

// UnimplementedJournalistSvcServer must be embedded to have forward compatible implementations.
type UnimplementedJournalistSvcServer struct {
}

func (UnimplementedJournalistSvcServer) CreateJournalist(context.Context, *CreateJournalistRequest) (*Journalist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJournalist not implemented")
}
func (UnimplementedJournalistSvcServer) GetJournalist(context.Context, *GetByIDRequest) (*Journalist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJournalist not implemented")
}
func (UnimplementedJournalistSvcServer) UpdateJournalist(context.Context, *Journalist) (*Journalist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJournalist not implemented")
}
func (UnimplementedJournalistSvcServer) ListJournalists(context.Context, *GetAllRequest) (*JournalistListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJournalists not implemented")
}
func (UnimplementedJournalistSvcServer) GetJournalistByName(context.Context, *GetByNameRequest) (*Journalist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJournalistByName not implemented")
}
func (UnimplementedJournalistSvcServer) mustEmbedUnimplementedJournalistSvcServer() {}

// UnsafeJournalistSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JournalistSvcServer will
// result in compilation errors.
type UnsafeJournalistSvcServer interface {
	mustEmbedUnimplementedJournalistSvcServer()
}

func RegisterJournalistSvcServer(s grpc.ServiceRegistrar, srv JournalistSvcServer) {
	s.RegisterService(&JournalistSvc_ServiceDesc, srv)
}

func _JournalistSvc_CreateJournalist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJournalistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalistSvcServer).CreateJournalist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.JournalistSvc/CreateJournalist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalistSvcServer).CreateJournalist(ctx, req.(*CreateJournalistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalistSvc_GetJournalist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalistSvcServer).GetJournalist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.JournalistSvc/GetJournalist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalistSvcServer).GetJournalist(ctx, req.(*GetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalistSvc_UpdateJournalist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Journalist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalistSvcServer).UpdateJournalist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.JournalistSvc/UpdateJournalist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalistSvcServer).UpdateJournalist(ctx, req.(*Journalist))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalistSvc_ListJournalists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalistSvcServer).ListJournalists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.JournalistSvc/ListJournalists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalistSvcServer).ListJournalists(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalistSvc_GetJournalistByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalistSvcServer).GetJournalistByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.JournalistSvc/GetJournalistByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalistSvcServer).GetJournalistByName(ctx, req.(*GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JournalistSvc_ServiceDesc is the grpc.ServiceDesc for JournalistSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JournalistSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.JournalistSvc",
	HandlerType: (*JournalistSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJournalist",
			Handler:    _JournalistSvc_CreateJournalist_Handler,
		},
		{
			MethodName: "GetJournalist",
			Handler:    _JournalistSvc_GetJournalist_Handler,
		},
		{
			MethodName: "UpdateJournalist",
			Handler:    _JournalistSvc_UpdateJournalist_Handler,
		},
		{
			MethodName: "ListJournalists",
			Handler:    _JournalistSvc_ListJournalists_Handler,
		},
		{
			MethodName: "GetJournalistByName",
			Handler:    _JournalistSvc_GetJournalistByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
