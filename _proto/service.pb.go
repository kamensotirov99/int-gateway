// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: service.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

type GetAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllRequest) Reset() {
	*x = GetAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllRequest) ProtoMessage() {}

func (x *GetAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllRequest.ProtoReflect.Descriptor instead.
func (*GetAllRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

type ListArticlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementCount int32 `protobuf:"varint,1,opt,name=elementCount,proto3" json:"elementCount,omitempty"`
}

func (x *ListArticlesRequest) Reset() {
	*x = ListArticlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArticlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArticlesRequest) ProtoMessage() {}

func (x *ListArticlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArticlesRequest.ProtoReflect.Descriptor instead.
func (*ListArticlesRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListArticlesRequest) GetElementCount() int32 {
	if x != nil {
		return x.ElementCount
	}
	return 0
}

//-----UPLOAD--------
type UploadSeasonPostersFSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId       string `protobuf:"bytes,1,opt,name=seriesId,proto3" json:"seriesId,omitempty"`
	SeasonId       string `protobuf:"bytes,2,opt,name=seasonId,proto3" json:"seasonId,omitempty"`
	ChunkData      []byte `protobuf:"bytes,3,opt,name=chunkData,proto3" json:"chunkData,omitempty"`
	ImageExtention string `protobuf:"bytes,4,opt,name=imageExtention,proto3" json:"imageExtention,omitempty"`
}

func (x *UploadSeasonPostersFSRequest) Reset() {
	*x = UploadSeasonPostersFSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSeasonPostersFSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSeasonPostersFSRequest) ProtoMessage() {}

func (x *UploadSeasonPostersFSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSeasonPostersFSRequest.ProtoReflect.Descriptor instead.
func (*UploadSeasonPostersFSRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *UploadSeasonPostersFSRequest) GetSeriesId() string {
	if x != nil {
		return x.SeriesId
	}
	return ""
}

func (x *UploadSeasonPostersFSRequest) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *UploadSeasonPostersFSRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *UploadSeasonPostersFSRequest) GetImageExtention() string {
	if x != nil {
		return x.ImageExtention
	}
	return ""
}

type UploadArticlePostersFSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId      string `protobuf:"bytes,1,opt,name=articleId,proto3" json:"articleId,omitempty"`
	ChunkData      []byte `protobuf:"bytes,2,opt,name=chunkData,proto3" json:"chunkData,omitempty"`
	ImageExtention string `protobuf:"bytes,3,opt,name=imageExtention,proto3" json:"imageExtention,omitempty"`
}

func (x *UploadArticlePostersFSRequest) Reset() {
	*x = UploadArticlePostersFSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadArticlePostersFSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadArticlePostersFSRequest) ProtoMessage() {}

func (x *UploadArticlePostersFSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadArticlePostersFSRequest.ProtoReflect.Descriptor instead.
func (*UploadArticlePostersFSRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *UploadArticlePostersFSRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *UploadArticlePostersFSRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *UploadArticlePostersFSRequest) GetImageExtention() string {
	if x != nil {
		return x.ImageExtention
	}
	return ""
}

type UploadArticlePostersServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId   string   `protobuf:"bytes,1,opt,name=articleId,proto3" json:"articleId,omitempty"`
	PostersPath []string `protobuf:"bytes,2,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *UploadArticlePostersServiceRequest) Reset() {
	*x = UploadArticlePostersServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadArticlePostersServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadArticlePostersServiceRequest) ProtoMessage() {}

func (x *UploadArticlePostersServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadArticlePostersServiceRequest.ProtoReflect.Descriptor instead.
func (*UploadArticlePostersServiceRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *UploadArticlePostersServiceRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *UploadArticlePostersServiceRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

type UploadEpisodePostersFSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId       string `protobuf:"bytes,1,opt,name=seriesId,proto3" json:"seriesId,omitempty"`
	SeasonId       string `protobuf:"bytes,2,opt,name=seasonId,proto3" json:"seasonId,omitempty"`
	EpisodeId      string `protobuf:"bytes,3,opt,name=episodeId,proto3" json:"episodeId,omitempty"`
	ChunkData      []byte `protobuf:"bytes,4,opt,name=chunkData,proto3" json:"chunkData,omitempty"`
	ImageExtention string `protobuf:"bytes,5,opt,name=imageExtention,proto3" json:"imageExtention,omitempty"`
}

func (x *UploadEpisodePostersFSRequest) Reset() {
	*x = UploadEpisodePostersFSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadEpisodePostersFSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadEpisodePostersFSRequest) ProtoMessage() {}

func (x *UploadEpisodePostersFSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadEpisodePostersFSRequest.ProtoReflect.Descriptor instead.
func (*UploadEpisodePostersFSRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

func (x *UploadEpisodePostersFSRequest) GetSeriesId() string {
	if x != nil {
		return x.SeriesId
	}
	return ""
}

func (x *UploadEpisodePostersFSRequest) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *UploadEpisodePostersFSRequest) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *UploadEpisodePostersFSRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *UploadEpisodePostersFSRequest) GetImageExtention() string {
	if x != nil {
		return x.ImageExtention
	}
	return ""
}

type UploadSeriesPostersFSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId       string `protobuf:"bytes,1,opt,name=seriesId,proto3" json:"seriesId,omitempty"`
	ChunkData      []byte `protobuf:"bytes,2,opt,name=chunkData,proto3" json:"chunkData,omitempty"`
	ImageExtention string `protobuf:"bytes,3,opt,name=imageExtention,proto3" json:"imageExtention,omitempty"`
}

func (x *UploadSeriesPostersFSRequest) Reset() {
	*x = UploadSeriesPostersFSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSeriesPostersFSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSeriesPostersFSRequest) ProtoMessage() {}

func (x *UploadSeriesPostersFSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSeriesPostersFSRequest.ProtoReflect.Descriptor instead.
func (*UploadSeriesPostersFSRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

func (x *UploadSeriesPostersFSRequest) GetSeriesId() string {
	if x != nil {
		return x.SeriesId
	}
	return ""
}

func (x *UploadSeriesPostersFSRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *UploadSeriesPostersFSRequest) GetImageExtention() string {
	if x != nil {
		return x.ImageExtention
	}
	return ""
}

type UploadMoviePostersFSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId        string `protobuf:"bytes,1,opt,name=movieId,proto3" json:"movieId,omitempty"`
	ChunkData      []byte `protobuf:"bytes,2,opt,name=chunkData,proto3" json:"chunkData,omitempty"`
	ImageExtention string `protobuf:"bytes,3,opt,name=imageExtention,proto3" json:"imageExtention,omitempty"`
}

func (x *UploadMoviePostersFSRequest) Reset() {
	*x = UploadMoviePostersFSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMoviePostersFSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMoviePostersFSRequest) ProtoMessage() {}

func (x *UploadMoviePostersFSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMoviePostersFSRequest.ProtoReflect.Descriptor instead.
func (*UploadMoviePostersFSRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *UploadMoviePostersFSRequest) GetMovieId() string {
	if x != nil {
		return x.MovieId
	}
	return ""
}

func (x *UploadMoviePostersFSRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *UploadMoviePostersFSRequest) GetImageExtention() string {
	if x != nil {
		return x.ImageExtention
	}
	return ""
}

type UploadSeriesPostersServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId    string   `protobuf:"bytes,1,opt,name=seriesId,proto3" json:"seriesId,omitempty"`
	PostersPath []string `protobuf:"bytes,2,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *UploadSeriesPostersServiceRequest) Reset() {
	*x = UploadSeriesPostersServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSeriesPostersServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSeriesPostersServiceRequest) ProtoMessage() {}

func (x *UploadSeriesPostersServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSeriesPostersServiceRequest.ProtoReflect.Descriptor instead.
func (*UploadSeriesPostersServiceRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *UploadSeriesPostersServiceRequest) GetSeriesId() string {
	if x != nil {
		return x.SeriesId
	}
	return ""
}

func (x *UploadSeriesPostersServiceRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

type UploadMoviePostersServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId     string   `protobuf:"bytes,1,opt,name=movieId,proto3" json:"movieId,omitempty"`
	PostersPath []string `protobuf:"bytes,2,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *UploadMoviePostersServiceRequest) Reset() {
	*x = UploadMoviePostersServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadMoviePostersServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadMoviePostersServiceRequest) ProtoMessage() {}

func (x *UploadMoviePostersServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadMoviePostersServiceRequest.ProtoReflect.Descriptor instead.
func (*UploadMoviePostersServiceRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

func (x *UploadMoviePostersServiceRequest) GetMovieId() string {
	if x != nil {
		return x.MovieId
	}
	return ""
}

func (x *UploadMoviePostersServiceRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

type UploadImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*UploadImageRequest_Info
	//	*UploadImageRequest_ChunkData
	Data isUploadImageRequest_Data `protobuf_oneof:"data"`
}

func (x *UploadImageRequest) Reset() {
	*x = UploadImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageRequest) ProtoMessage() {}

func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.
func (*UploadImageRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (m *UploadImageRequest) GetData() isUploadImageRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UploadImageRequest) GetInfo() *ImageInfo {
	if x, ok := x.GetData().(*UploadImageRequest_Info); ok {
		return x.Info
	}
	return nil
}

func (x *UploadImageRequest) GetChunkData() []byte {
	if x, ok := x.GetData().(*UploadImageRequest_ChunkData); ok {
		return x.ChunkData
	}
	return nil
}

type isUploadImageRequest_Data interface {
	isUploadImageRequest_Data()
}

type UploadImageRequest_Info struct {
	Info *ImageInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type UploadImageRequest_ChunkData struct {
	ChunkData []byte `protobuf:"bytes,2,opt,name=chunk_data,json=chunkData,proto3,oneof"`
}

func (*UploadImageRequest_Info) isUploadImageRequest_Data() {}

func (*UploadImageRequest_ChunkData) isUploadImageRequest_Data() {}

type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ImageType string `protobuf:"bytes,2,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *ImageInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ImageInfo) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

type UploadCelebrityPostersFSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CelebrityId    string `protobuf:"bytes,1,opt,name=celebrityId,proto3" json:"celebrityId,omitempty"`
	ChunkData      []byte `protobuf:"bytes,2,opt,name=chunkData,proto3" json:"chunkData,omitempty"`
	ImageExtention string `protobuf:"bytes,3,opt,name=imageExtention,proto3" json:"imageExtention,omitempty"`
}

func (x *UploadCelebrityPostersFSRequest) Reset() {
	*x = UploadCelebrityPostersFSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCelebrityPostersFSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCelebrityPostersFSRequest) ProtoMessage() {}

func (x *UploadCelebrityPostersFSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCelebrityPostersFSRequest.ProtoReflect.Descriptor instead.
func (*UploadCelebrityPostersFSRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *UploadCelebrityPostersFSRequest) GetCelebrityId() string {
	if x != nil {
		return x.CelebrityId
	}
	return ""
}

func (x *UploadCelebrityPostersFSRequest) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

func (x *UploadCelebrityPostersFSRequest) GetImageExtention() string {
	if x != nil {
		return x.ImageExtention
	}
	return ""
}

type UploadPosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosterPath string `protobuf:"bytes,1,opt,name=posterPath,proto3" json:"posterPath,omitempty"`
}

func (x *UploadPosterResponse) Reset() {
	*x = UploadPosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPosterResponse) ProtoMessage() {}

func (x *UploadPosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPosterResponse.ProtoReflect.Descriptor instead.
func (*UploadPosterResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{14}
}

func (x *UploadPosterResponse) GetPosterPath() string {
	if x != nil {
		return x.PosterPath
	}
	return ""
}

type UploadImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostersPath []string `protobuf:"bytes,1,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *UploadImagesResponse) Reset() {
	*x = UploadImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImagesResponse) ProtoMessage() {}

func (x *UploadImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImagesResponse.ProtoReflect.Descriptor instead.
func (*UploadImagesResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{15}
}

func (x *UploadImagesResponse) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

type DeleteSeriesPosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId string `protobuf:"bytes,1,opt,name=seriesId,proto3" json:"seriesId,omitempty"`
	Image    string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DeleteSeriesPosterRequest) Reset() {
	*x = DeleteSeriesPosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeriesPosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeriesPosterRequest) ProtoMessage() {}

func (x *DeleteSeriesPosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeriesPosterRequest.ProtoReflect.Descriptor instead.
func (*DeleteSeriesPosterRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteSeriesPosterRequest) GetSeriesId() string {
	if x != nil {
		return x.SeriesId
	}
	return ""
}

func (x *DeleteSeriesPosterRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type DeleteMoviePosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId string `protobuf:"bytes,1,opt,name=movieId,proto3" json:"movieId,omitempty"`
	Image   string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DeleteMoviePosterRequest) Reset() {
	*x = DeleteMoviePosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMoviePosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMoviePosterRequest) ProtoMessage() {}

func (x *DeleteMoviePosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMoviePosterRequest.ProtoReflect.Descriptor instead.
func (*DeleteMoviePosterRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteMoviePosterRequest) GetMovieId() string {
	if x != nil {
		return x.MovieId
	}
	return ""
}

func (x *DeleteMoviePosterRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type UploadPostersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostersPath []string `protobuf:"bytes,1,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *UploadPostersResponse) Reset() {
	*x = UploadPostersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadPostersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadPostersResponse) ProtoMessage() {}

func (x *UploadPostersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadPostersResponse.ProtoReflect.Descriptor instead.
func (*UploadPostersResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{18}
}

func (x *UploadPostersResponse) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

//------DELETE--------
type DeleteSeasonPosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId string `protobuf:"bytes,1,opt,name=seriesId,proto3" json:"seriesId,omitempty"`
	SeasonId string `protobuf:"bytes,2,opt,name=seasonId,proto3" json:"seasonId,omitempty"`
	Image    string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DeleteSeasonPosterRequest) Reset() {
	*x = DeleteSeasonPosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSeasonPosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeasonPosterRequest) ProtoMessage() {}

func (x *DeleteSeasonPosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeasonPosterRequest.ProtoReflect.Descriptor instead.
func (*DeleteSeasonPosterRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteSeasonPosterRequest) GetSeriesId() string {
	if x != nil {
		return x.SeriesId
	}
	return ""
}

func (x *DeleteSeasonPosterRequest) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *DeleteSeasonPosterRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type DeleteArticlePosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId string `protobuf:"bytes,1,opt,name=articleId,proto3" json:"articleId,omitempty"`
	Image     string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DeleteArticlePosterRequest) Reset() {
	*x = DeleteArticlePosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticlePosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticlePosterRequest) ProtoMessage() {}

func (x *DeleteArticlePosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticlePosterRequest.ProtoReflect.Descriptor instead.
func (*DeleteArticlePosterRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteArticlePosterRequest) GetArticleId() string {
	if x != nil {
		return x.ArticleId
	}
	return ""
}

func (x *DeleteArticlePosterRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type DeleteEpisodePosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeriesId  string `protobuf:"bytes,1,opt,name=seriesId,proto3" json:"seriesId,omitempty"`
	SeasonId  string `protobuf:"bytes,2,opt,name=seasonId,proto3" json:"seasonId,omitempty"`
	EpisodeId string `protobuf:"bytes,3,opt,name=episodeId,proto3" json:"episodeId,omitempty"`
	Image     string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DeleteEpisodePosterRequest) Reset() {
	*x = DeleteEpisodePosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEpisodePosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEpisodePosterRequest) ProtoMessage() {}

func (x *DeleteEpisodePosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEpisodePosterRequest.ProtoReflect.Descriptor instead.
func (*DeleteEpisodePosterRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteEpisodePosterRequest) GetSeriesId() string {
	if x != nil {
		return x.SeriesId
	}
	return ""
}

func (x *DeleteEpisodePosterRequest) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *DeleteEpisodePosterRequest) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *DeleteEpisodePosterRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type DeleteCelebrityPosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CelebrityId string `protobuf:"bytes,1,opt,name=celebrityId,proto3" json:"celebrityId,omitempty"`
	Image       string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *DeleteCelebrityPosterRequest) Reset() {
	*x = DeleteCelebrityPosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCelebrityPosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCelebrityPosterRequest) ProtoMessage() {}

func (x *DeleteCelebrityPosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCelebrityPosterRequest.ProtoReflect.Descriptor instead.
func (*DeleteCelebrityPosterRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteCelebrityPosterRequest) GetCelebrityId() string {
	if x != nil {
		return x.CelebrityId
	}
	return ""
}

func (x *DeleteCelebrityPosterRequest) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

//------ARTICLES------
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	PostersPath []string               `protobuf:"bytes,4,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Journalist  *ShortJournalist       `protobuf:"bytes,6,opt,name=journalist,proto3" json:"journalist,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{23}
}

func (x *Article) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Article) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *Article) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Article) GetJournalist() *ShortJournalist {
	if x != nil {
		return x.Journalist
	}
	return nil
}

type CreateArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	ReleaseDate *timestamppb.Timestamp   `protobuf:"bytes,2,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	PostersPath []string                 `protobuf:"bytes,3,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	Description string                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Journalist  *CreateJournalistRequest `protobuf:"bytes,5,opt,name=journalist,proto3" json:"journalist,omitempty"`
}

func (x *CreateArticleRequest) Reset() {
	*x = CreateArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArticleRequest) ProtoMessage() {}

func (x *CreateArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArticleRequest.ProtoReflect.Descriptor instead.
func (*CreateArticleRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{24}
}

func (x *CreateArticleRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateArticleRequest) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *CreateArticleRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *CreateArticleRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateArticleRequest) GetJournalist() *CreateJournalistRequest {
	if x != nil {
		return x.Journalist
	}
	return nil
}

type ArticleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Articles []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *ArticleListResponse) Reset() {
	*x = ArticleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleListResponse) ProtoMessage() {}

func (x *ArticleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleListResponse.ProtoReflect.Descriptor instead.
func (*ArticleListResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{25}
}

func (x *ArticleListResponse) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

//------JOURNALISTS------
type Journalist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Journalist) Reset() {
	*x = Journalist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Journalist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Journalist) ProtoMessage() {}

func (x *Journalist) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Journalist.ProtoReflect.Descriptor instead.
func (*Journalist) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{26}
}

func (x *Journalist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Journalist) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateJournalistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateJournalistRequest) Reset() {
	*x = CreateJournalistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJournalistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJournalistRequest) ProtoMessage() {}

func (x *CreateJournalistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJournalistRequest.ProtoReflect.Descriptor instead.
func (*CreateJournalistRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{27}
}

func (x *CreateJournalistRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type JournalistListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Journalists []*Journalist `protobuf:"bytes,1,rep,name=journalists,proto3" json:"journalists,omitempty"`
}

func (x *JournalistListResponse) Reset() {
	*x = JournalistListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalistListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalistListResponse) ProtoMessage() {}

func (x *JournalistListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalistListResponse.ProtoReflect.Descriptor instead.
func (*JournalistListResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{28}
}

func (x *JournalistListResponse) GetJournalists() []*Journalist {
	if x != nil {
		return x.Journalists
	}
	return nil
}

type ShortJournalist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ShortJournalist) Reset() {
	*x = ShortJournalist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortJournalist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortJournalist) ProtoMessage() {}

func (x *ShortJournalist) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortJournalist.ProtoReflect.Descriptor instead.
func (*ShortJournalist) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{29}
}

func (x *ShortJournalist) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//------CELEBRITIES------
type Celebrity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PostersPath  []string               `protobuf:"bytes,3,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	DateOfBirth  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	DateOfDeath  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=dateOfDeath,proto3" json:"dateOfDeath,omitempty"`
	PlaceOfBirth string                 `protobuf:"bytes,6,opt,name=placeOfBirth,proto3" json:"placeOfBirth,omitempty"`
	Gender       string                 `protobuf:"bytes,7,opt,name=gender,proto3" json:"gender,omitempty"`
	Bio          string                 `protobuf:"bytes,8,opt,name=bio,proto3" json:"bio,omitempty"`
	Occupation   []string               `protobuf:"bytes,9,rep,name=occupation,proto3" json:"occupation,omitempty"`
}

func (x *Celebrity) Reset() {
	*x = Celebrity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Celebrity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Celebrity) ProtoMessage() {}

func (x *Celebrity) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Celebrity.ProtoReflect.Descriptor instead.
func (*Celebrity) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{30}
}

func (x *Celebrity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Celebrity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Celebrity) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *Celebrity) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *Celebrity) GetDateOfDeath() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfDeath
	}
	return nil
}

func (x *Celebrity) GetPlaceOfBirth() string {
	if x != nil {
		return x.PlaceOfBirth
	}
	return ""
}

func (x *Celebrity) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Celebrity) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *Celebrity) GetOccupation() []string {
	if x != nil {
		return x.Occupation
	}
	return nil
}

type CreateCelebrityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PostersPath  []string               `protobuf:"bytes,2,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	DateOfBirth  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	DateOfDeath  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=dateOfDeath,proto3" json:"dateOfDeath,omitempty"`
	PlaceOfBirth string                 `protobuf:"bytes,5,opt,name=placeOfBirth,proto3" json:"placeOfBirth,omitempty"`
	Gender       string                 `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`
	Bio          string                 `protobuf:"bytes,7,opt,name=bio,proto3" json:"bio,omitempty"`
	Occupation   []string               `protobuf:"bytes,8,rep,name=occupation,proto3" json:"occupation,omitempty"`
}

func (x *CreateCelebrityRequest) Reset() {
	*x = CreateCelebrityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCelebrityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCelebrityRequest) ProtoMessage() {}

func (x *CreateCelebrityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCelebrityRequest.ProtoReflect.Descriptor instead.
func (*CreateCelebrityRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{31}
}

func (x *CreateCelebrityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCelebrityRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *CreateCelebrityRequest) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *CreateCelebrityRequest) GetDateOfDeath() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfDeath
	}
	return nil
}

func (x *CreateCelebrityRequest) GetPlaceOfBirth() string {
	if x != nil {
		return x.PlaceOfBirth
	}
	return ""
}

func (x *CreateCelebrityRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *CreateCelebrityRequest) GetBio() string {
	if x != nil {
		return x.Bio
	}
	return ""
}

func (x *CreateCelebrityRequest) GetOccupation() []string {
	if x != nil {
		return x.Occupation
	}
	return nil
}

type CelebrityListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Celebrities []*Celebrity `protobuf:"bytes,1,rep,name=celebrities,proto3" json:"celebrities,omitempty"`
}

func (x *CelebrityListResponse) Reset() {
	*x = CelebrityListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CelebrityListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CelebrityListResponse) ProtoMessage() {}

func (x *CelebrityListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CelebrityListResponse.ProtoReflect.Descriptor instead.
func (*CelebrityListResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{32}
}

func (x *CelebrityListResponse) GetCelebrities() []*Celebrity {
	if x != nil {
		return x.Celebrities
	}
	return nil
}

type GetByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIDRequest) Reset() {
	*x = GetByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDRequest) ProtoMessage() {}

func (x *GetByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDRequest.ProtoReflect.Descriptor instead.
func (*GetByIDRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{33}
}

func (x *GetByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetByNameRequest) Reset() {
	*x = GetByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByNameRequest) ProtoMessage() {}

func (x *GetByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByNameRequest.ProtoReflect.Descriptor instead.
func (*GetByNameRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{34}
}

func (x *GetByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UploadCelebrityPostersServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CelebrityId string   `protobuf:"bytes,1,opt,name=celebrityId,proto3" json:"celebrityId,omitempty"`
	PostersPath []string `protobuf:"bytes,2,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *UploadCelebrityPostersServiceRequest) Reset() {
	*x = UploadCelebrityPostersServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadCelebrityPostersServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCelebrityPostersServiceRequest) ProtoMessage() {}

func (x *UploadCelebrityPostersServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCelebrityPostersServiceRequest.ProtoReflect.Descriptor instead.
func (*UploadCelebrityPostersServiceRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{35}
}

func (x *UploadCelebrityPostersServiceRequest) GetCelebrityId() string {
	if x != nil {
		return x.CelebrityId
	}
	return ""
}

func (x *UploadCelebrityPostersServiceRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

//------EPISODES------
type Episode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PostersPath []string          `protobuf:"bytes,3,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	TrailerUrl  string            `protobuf:"bytes,4,opt,name=trailerUrl,proto3" json:"trailerUrl,omitempty"`
	ShowLength  *ShowLength       `protobuf:"bytes,5,opt,name=showLength,proto3" json:"showLength,omitempty"`
	Rating      float64           `protobuf:"fixed64,6,opt,name=rating,proto3" json:"rating,omitempty"`
	Resume      string            `protobuf:"bytes,7,opt,name=resume,proto3" json:"resume,omitempty"`
	WrittenBy   *FilmCrew         `protobuf:"bytes,8,opt,name=writtenBy,proto3" json:"writtenBy,omitempty"`
	ProducedBy  *FilmCrew         `protobuf:"bytes,9,opt,name=producedBy,proto3" json:"producedBy,omitempty"`
	DirectedBy  *FilmCrew         `protobuf:"bytes,10,opt,name=directedBy,proto3" json:"directedBy,omitempty"`
	Starring    *ShortCelebrities `protobuf:"bytes,11,opt,name=starring,proto3" json:"starring,omitempty"`
	SeasonId    string            `protobuf:"bytes,12,opt,name=seasonId,proto3" json:"seasonId,omitempty"`
}

func (x *Episode) Reset() {
	*x = Episode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Episode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Episode) ProtoMessage() {}

func (x *Episode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Episode.ProtoReflect.Descriptor instead.
func (*Episode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{36}
}

func (x *Episode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Episode) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Episode) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *Episode) GetTrailerUrl() string {
	if x != nil {
		return x.TrailerUrl
	}
	return ""
}

func (x *Episode) GetShowLength() *ShowLength {
	if x != nil {
		return x.ShowLength
	}
	return nil
}

func (x *Episode) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Episode) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *Episode) GetWrittenBy() *FilmCrew {
	if x != nil {
		return x.WrittenBy
	}
	return nil
}

func (x *Episode) GetProducedBy() *FilmCrew {
	if x != nil {
		return x.ProducedBy
	}
	return nil
}

func (x *Episode) GetDirectedBy() *FilmCrew {
	if x != nil {
		return x.DirectedBy
	}
	return nil
}

func (x *Episode) GetStarring() *ShortCelebrities {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Episode) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

type CreateEpisodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	PostersPath []string          `protobuf:"bytes,2,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	TrailerUrl  string            `protobuf:"bytes,3,opt,name=trailerUrl,proto3" json:"trailerUrl,omitempty"`
	ShowLength  *ShowLength       `protobuf:"bytes,4,opt,name=showLength,proto3" json:"showLength,omitempty"`
	Rating      float64           `protobuf:"fixed64,5,opt,name=rating,proto3" json:"rating,omitempty"`
	Resume      string            `protobuf:"bytes,6,opt,name=resume,proto3" json:"resume,omitempty"`
	WrittenBy   *FilmCrew         `protobuf:"bytes,7,opt,name=writtenBy,proto3" json:"writtenBy,omitempty"`
	ProducedBy  *FilmCrew         `protobuf:"bytes,8,opt,name=producedBy,proto3" json:"producedBy,omitempty"`
	DirectedBy  *FilmCrew         `protobuf:"bytes,9,opt,name=directedBy,proto3" json:"directedBy,omitempty"`
	Starring    *ShortCelebrities `protobuf:"bytes,10,opt,name=starring,proto3" json:"starring,omitempty"`
	SeasonId    string            `protobuf:"bytes,11,opt,name=seasonId,proto3" json:"seasonId,omitempty"`
}

func (x *CreateEpisodeRequest) Reset() {
	*x = CreateEpisodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEpisodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEpisodeRequest) ProtoMessage() {}

func (x *CreateEpisodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEpisodeRequest.ProtoReflect.Descriptor instead.
func (*CreateEpisodeRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{37}
}

func (x *CreateEpisodeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateEpisodeRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *CreateEpisodeRequest) GetTrailerUrl() string {
	if x != nil {
		return x.TrailerUrl
	}
	return ""
}

func (x *CreateEpisodeRequest) GetShowLength() *ShowLength {
	if x != nil {
		return x.ShowLength
	}
	return nil
}

func (x *CreateEpisodeRequest) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *CreateEpisodeRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *CreateEpisodeRequest) GetWrittenBy() *FilmCrew {
	if x != nil {
		return x.WrittenBy
	}
	return nil
}

func (x *CreateEpisodeRequest) GetProducedBy() *FilmCrew {
	if x != nil {
		return x.ProducedBy
	}
	return nil
}

func (x *CreateEpisodeRequest) GetDirectedBy() *FilmCrew {
	if x != nil {
		return x.DirectedBy
	}
	return nil
}

func (x *CreateEpisodeRequest) GetStarring() *ShortCelebrities {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *CreateEpisodeRequest) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

type ListEpisodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Episodes []*Episode `protobuf:"bytes,1,rep,name=episodes,proto3" json:"episodes,omitempty"`
}

func (x *ListEpisodeResponse) Reset() {
	*x = ListEpisodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEpisodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEpisodeResponse) ProtoMessage() {}

func (x *ListEpisodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEpisodeResponse.ProtoReflect.Descriptor instead.
func (*ListEpisodeResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{38}
}

func (x *ListEpisodeResponse) GetEpisodes() []*Episode {
	if x != nil {
		return x.Episodes
	}
	return nil
}

type ShowLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hours   int32 `protobuf:"varint,1,opt,name=hours,proto3" json:"hours,omitempty"`
	Minutes int32 `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"`
}

func (x *ShowLength) Reset() {
	*x = ShowLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowLength) ProtoMessage() {}

func (x *ShowLength) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowLength.ProtoReflect.Descriptor instead.
func (*ShowLength) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{39}
}

func (x *ShowLength) GetHours() int32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *ShowLength) GetMinutes() int32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

type FilmStaff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PostersPath []string `protobuf:"bytes,3,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *FilmStaff) Reset() {
	*x = FilmStaff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmStaff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmStaff) ProtoMessage() {}

func (x *FilmStaff) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmStaff.ProtoReflect.Descriptor instead.
func (*FilmStaff) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{40}
}

func (x *FilmStaff) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FilmStaff) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilmStaff) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

type FilmCrew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilmCrew []*FilmStaff `protobuf:"bytes,1,rep,name=filmCrew,proto3" json:"filmCrew,omitempty"`
}

func (x *FilmCrew) Reset() {
	*x = FilmCrew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilmCrew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilmCrew) ProtoMessage() {}

func (x *FilmCrew) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilmCrew.ProtoReflect.Descriptor instead.
func (*FilmCrew) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{41}
}

func (x *FilmCrew) GetFilmCrew() []*FilmStaff {
	if x != nil {
		return x.FilmCrew
	}
	return nil
}

type ShortCelebrity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RoleName    string   `protobuf:"bytes,3,opt,name=roleName,proto3" json:"roleName,omitempty"`
	PostersPath []string `protobuf:"bytes,4,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *ShortCelebrity) Reset() {
	*x = ShortCelebrity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortCelebrity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortCelebrity) ProtoMessage() {}

func (x *ShortCelebrity) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortCelebrity.ProtoReflect.Descriptor instead.
func (*ShortCelebrity) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{42}
}

func (x *ShortCelebrity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortCelebrity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ShortCelebrity) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *ShortCelebrity) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

type ShortCelebrities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortCelebs []*ShortCelebrity `protobuf:"bytes,1,rep,name=shortCelebs,proto3" json:"shortCelebs,omitempty"`
}

func (x *ShortCelebrities) Reset() {
	*x = ShortCelebrities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortCelebrities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortCelebrities) ProtoMessage() {}

func (x *ShortCelebrities) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortCelebrities.ProtoReflect.Descriptor instead.
func (*ShortCelebrities) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{43}
}

func (x *ShortCelebrities) GetShortCelebs() []*ShortCelebrity {
	if x != nil {
		return x.ShortCelebs
	}
	return nil
}

type ShortEpisode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PostersPath []string `protobuf:"bytes,3,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	Rating      float64  `protobuf:"fixed64,4,opt,name=rating,proto3" json:"rating,omitempty"`
	Resume      string   `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
}

func (x *ShortEpisode) Reset() {
	*x = ShortEpisode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortEpisode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortEpisode) ProtoMessage() {}

func (x *ShortEpisode) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortEpisode.ProtoReflect.Descriptor instead.
func (*ShortEpisode) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{44}
}

func (x *ShortEpisode) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortEpisode) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ShortEpisode) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *ShortEpisode) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *ShortEpisode) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type ShortEpisodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShortEpisodes []*ShortEpisode `protobuf:"bytes,1,rep,name=shortEpisodes,proto3" json:"shortEpisodes,omitempty"`
}

func (x *ShortEpisodeList) Reset() {
	*x = ShortEpisodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortEpisodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortEpisodeList) ProtoMessage() {}

func (x *ShortEpisodeList) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortEpisodeList.ProtoReflect.Descriptor instead.
func (*ShortEpisodeList) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{45}
}

func (x *ShortEpisodeList) GetShortEpisodes() []*ShortEpisode {
	if x != nil {
		return x.ShortEpisodes
	}
	return nil
}

type UploadEpisodePostersServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpisodeId   string   `protobuf:"bytes,1,opt,name=episodeId,proto3" json:"episodeId,omitempty"`
	PostersPath []string `protobuf:"bytes,2,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *UploadEpisodePostersServiceRequest) Reset() {
	*x = UploadEpisodePostersServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadEpisodePostersServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadEpisodePostersServiceRequest) ProtoMessage() {}

func (x *UploadEpisodePostersServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadEpisodePostersServiceRequest.ProtoReflect.Descriptor instead.
func (*UploadEpisodePostersServiceRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{46}
}

func (x *UploadEpisodePostersServiceRequest) GetEpisodeId() string {
	if x != nil {
		return x.EpisodeId
	}
	return ""
}

func (x *UploadEpisodePostersServiceRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

//------SHOWS------
type Show struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Type        string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	PostersPath []string               `protobuf:"bytes,4,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	EndDate     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Rating      float64                `protobuf:"fixed64,7,opt,name=rating,proto3" json:"rating,omitempty"`
	Length      *ShowLength            `protobuf:"bytes,8,opt,name=length,proto3" json:"length,omitempty"`
	TrailerUrl  string                 `protobuf:"bytes,9,opt,name=trailerUrl,proto3" json:"trailerUrl,omitempty"`
	Genres      *ShortGenres           `protobuf:"bytes,10,opt,name=genres,proto3" json:"genres,omitempty"`
	DirectedBy  *FilmCrew              `protobuf:"bytes,11,opt,name=directedBy,proto3" json:"directedBy,omitempty"`
	ProducedBy  *FilmCrew              `protobuf:"bytes,12,opt,name=producedBy,proto3" json:"producedBy,omitempty"`
	WrittenBy   *FilmCrew              `protobuf:"bytes,13,opt,name=writtenBy,proto3" json:"writtenBy,omitempty"`
	Starring    *ShortCelebrities      `protobuf:"bytes,14,opt,name=starring,proto3" json:"starring,omitempty"`
	Description string                 `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`
	Seasons     *ShortSeasons          `protobuf:"bytes,16,opt,name=seasons,proto3" json:"seasons,omitempty"`
}

func (x *Show) Reset() {
	*x = Show{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Show) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Show) ProtoMessage() {}

func (x *Show) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Show.ProtoReflect.Descriptor instead.
func (*Show) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{47}
}

func (x *Show) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Show) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Show) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Show) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *Show) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Show) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Show) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Show) GetLength() *ShowLength {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *Show) GetTrailerUrl() string {
	if x != nil {
		return x.TrailerUrl
	}
	return ""
}

func (x *Show) GetGenres() *ShortGenres {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Show) GetDirectedBy() *FilmCrew {
	if x != nil {
		return x.DirectedBy
	}
	return nil
}

func (x *Show) GetProducedBy() *FilmCrew {
	if x != nil {
		return x.ProducedBy
	}
	return nil
}

func (x *Show) GetWrittenBy() *FilmCrew {
	if x != nil {
		return x.WrittenBy
	}
	return nil
}

func (x *Show) GetStarring() *ShortCelebrities {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *Show) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Show) GetSeasons() *ShortSeasons {
	if x != nil {
		return x.Seasons
	}
	return nil
}

type ShortGenres struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genres []*ShortGenre `protobuf:"bytes,1,rep,name=genres,proto3" json:"genres,omitempty"`
}

func (x *ShortGenres) Reset() {
	*x = ShortGenres{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortGenres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortGenres) ProtoMessage() {}

func (x *ShortGenres) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortGenres.ProtoReflect.Descriptor instead.
func (*ShortGenres) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{48}
}

func (x *ShortGenres) GetGenres() []*ShortGenre {
	if x != nil {
		return x.Genres
	}
	return nil
}

type ShortGenre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ShortGenre) Reset() {
	*x = ShortGenre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortGenre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortGenre) ProtoMessage() {}

func (x *ShortGenre) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortGenre.ProtoReflect.Descriptor instead.
func (*ShortGenre) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{49}
}

func (x *ShortGenre) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortGenre) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ShortSeason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PostersPath []string `protobuf:"bytes,3,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	Rating      float64  `protobuf:"fixed64,4,opt,name=rating,proto3" json:"rating,omitempty"`
}

func (x *ShortSeason) Reset() {
	*x = ShortSeason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortSeason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortSeason) ProtoMessage() {}

func (x *ShortSeason) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortSeason.ProtoReflect.Descriptor instead.
func (*ShortSeason) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{50}
}

func (x *ShortSeason) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ShortSeason) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ShortSeason) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *ShortSeason) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type ShortSeasons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seasons []*ShortSeason `protobuf:"bytes,1,rep,name=seasons,proto3" json:"seasons,omitempty"`
}

func (x *ShortSeasons) Reset() {
	*x = ShortSeasons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShortSeasons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShortSeasons) ProtoMessage() {}

func (x *ShortSeasons) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShortSeasons.ProtoReflect.Descriptor instead.
func (*ShortSeasons) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{51}
}

func (x *ShortSeasons) GetSeasons() []*ShortSeason {
	if x != nil {
		return x.Seasons
	}
	return nil
}

type Genre struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Genre) Reset() {
	*x = Genre{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Genre) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Genre) ProtoMessage() {}

func (x *Genre) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Genre.ProtoReflect.Descriptor instead.
func (*Genre) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{52}
}

func (x *Genre) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Genre) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Genre) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GenreListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genres []*Genre `protobuf:"bytes,1,rep,name=genres,proto3" json:"genres,omitempty"`
}

func (x *GenreListResponse) Reset() {
	*x = GenreListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenreListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenreListResponse) ProtoMessage() {}

func (x *GenreListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenreListResponse.ProtoReflect.Descriptor instead.
func (*GenreListResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{53}
}

func (x *GenreListResponse) GetGenres() []*Genre {
	if x != nil {
		return x.Genres
	}
	return nil
}

type CreateShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type        string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	PostersPath []string               `protobuf:"bytes,3,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	EndDate     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Rating      float64                `protobuf:"fixed64,6,opt,name=rating,proto3" json:"rating,omitempty"`
	Length      *ShowLength            `protobuf:"bytes,7,opt,name=length,proto3" json:"length,omitempty"`
	TrailerUrl  string                 `protobuf:"bytes,8,opt,name=trailerUrl,proto3" json:"trailerUrl,omitempty"`
	Genres      *ShortGenres           `protobuf:"bytes,9,opt,name=genres,proto3" json:"genres,omitempty"`
	DirectedBy  *FilmCrew              `protobuf:"bytes,10,opt,name=directedBy,proto3" json:"directedBy,omitempty"`
	ProducedBy  *FilmCrew              `protobuf:"bytes,11,opt,name=producedBy,proto3" json:"producedBy,omitempty"`
	WrittenBy   *FilmCrew              `protobuf:"bytes,12,opt,name=writtenBy,proto3" json:"writtenBy,omitempty"`
	Starring    *ShortCelebrities      `protobuf:"bytes,13,opt,name=starring,proto3" json:"starring,omitempty"`
	Description string                 `protobuf:"bytes,14,opt,name=description,proto3" json:"description,omitempty"`
	Seasons     *ShortSeasons          `protobuf:"bytes,15,opt,name=seasons,proto3" json:"seasons,omitempty"`
}

func (x *CreateShowRequest) Reset() {
	*x = CreateShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShowRequest) ProtoMessage() {}

func (x *CreateShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShowRequest.ProtoReflect.Descriptor instead.
func (*CreateShowRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{54}
}

func (x *CreateShowRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateShowRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateShowRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *CreateShowRequest) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *CreateShowRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CreateShowRequest) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *CreateShowRequest) GetLength() *ShowLength {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *CreateShowRequest) GetTrailerUrl() string {
	if x != nil {
		return x.TrailerUrl
	}
	return ""
}

func (x *CreateShowRequest) GetGenres() *ShortGenres {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *CreateShowRequest) GetDirectedBy() *FilmCrew {
	if x != nil {
		return x.DirectedBy
	}
	return nil
}

func (x *CreateShowRequest) GetProducedBy() *FilmCrew {
	if x != nil {
		return x.ProducedBy
	}
	return nil
}

func (x *CreateShowRequest) GetWrittenBy() *FilmCrew {
	if x != nil {
		return x.WrittenBy
	}
	return nil
}

func (x *CreateShowRequest) GetStarring() *ShortCelebrities {
	if x != nil {
		return x.Starring
	}
	return nil
}

func (x *CreateShowRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateShowRequest) GetSeasons() *ShortSeasons {
	if x != nil {
		return x.Seasons
	}
	return nil
}

type ShowListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shows []*Show `protobuf:"bytes,1,rep,name=shows,proto3" json:"shows,omitempty"`
}

func (x *ShowListResponse) Reset() {
	*x = ShowListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShowListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowListResponse) ProtoMessage() {}

func (x *ShowListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowListResponse.ProtoReflect.Descriptor instead.
func (*ShowListResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{55}
}

func (x *ShowListResponse) GetShows() []*Show {
	if x != nil {
		return x.Shows
	}
	return nil
}

type CreateGenreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreateGenreRequest) Reset() {
	*x = CreateGenreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGenreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGenreRequest) ProtoMessage() {}

func (x *CreateGenreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGenreRequest.ProtoReflect.Descriptor instead.
func (*CreateGenreRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{56}
}

func (x *CreateGenreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGenreRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

//------SEASONS------
type Season struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	TrailerUrl  string                 `protobuf:"bytes,3,opt,name=trailerUrl,proto3" json:"trailerUrl,omitempty"`
	PostersPath []string               `protobuf:"bytes,4,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	Resume      string                 `protobuf:"bytes,5,opt,name=resume,proto3" json:"resume,omitempty"`
	Rating      float64                `protobuf:"fixed64,6,opt,name=rating,proto3" json:"rating,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	WrittenBy   *FilmCrew              `protobuf:"bytes,8,opt,name=writtenBy,proto3" json:"writtenBy,omitempty"`
	ProducedBy  *FilmCrew              `protobuf:"bytes,9,opt,name=producedBy,proto3" json:"producedBy,omitempty"`
	DirectedBy  *FilmCrew              `protobuf:"bytes,10,opt,name=directedBy,proto3" json:"directedBy,omitempty"`
	Episodes    *ShortEpisodeList      `protobuf:"bytes,11,opt,name=episodes,proto3" json:"episodes,omitempty"`
	ShowId      string                 `protobuf:"bytes,12,opt,name=showId,proto3" json:"showId,omitempty"`
}

func (x *Season) Reset() {
	*x = Season{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Season) ProtoMessage() {}

func (x *Season) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Season.ProtoReflect.Descriptor instead.
func (*Season) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{57}
}

func (x *Season) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Season) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Season) GetTrailerUrl() string {
	if x != nil {
		return x.TrailerUrl
	}
	return ""
}

func (x *Season) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *Season) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *Season) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Season) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Season) GetWrittenBy() *FilmCrew {
	if x != nil {
		return x.WrittenBy
	}
	return nil
}

func (x *Season) GetProducedBy() *FilmCrew {
	if x != nil {
		return x.ProducedBy
	}
	return nil
}

func (x *Season) GetDirectedBy() *FilmCrew {
	if x != nil {
		return x.DirectedBy
	}
	return nil
}

func (x *Season) GetEpisodes() *ShortEpisodeList {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *Season) GetShowId() string {
	if x != nil {
		return x.ShowId
	}
	return ""
}

type CreateSeasonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	TrailerUrl  string                 `protobuf:"bytes,2,opt,name=trailerUrl,proto3" json:"trailerUrl,omitempty"`
	Resume      string                 `protobuf:"bytes,3,opt,name=resume,proto3" json:"resume,omitempty"`
	Rating      float64                `protobuf:"fixed64,4,opt,name=rating,proto3" json:"rating,omitempty"`
	ReleaseDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=releaseDate,proto3" json:"releaseDate,omitempty"`
	WrittenBy   *FilmCrew              `protobuf:"bytes,6,opt,name=writtenBy,proto3" json:"writtenBy,omitempty"`
	ProducedBy  *FilmCrew              `protobuf:"bytes,7,opt,name=producedBy,proto3" json:"producedBy,omitempty"`
	DirectedBy  *FilmCrew              `protobuf:"bytes,8,opt,name=directedBy,proto3" json:"directedBy,omitempty"`
	Episodes    *ShortEpisodeList      `protobuf:"bytes,9,opt,name=episodes,proto3" json:"episodes,omitempty"`
	PostersPath []string               `protobuf:"bytes,10,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
	ShowId      string                 `protobuf:"bytes,11,opt,name=showId,proto3" json:"showId,omitempty"`
}

func (x *CreateSeasonRequest) Reset() {
	*x = CreateSeasonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeasonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeasonRequest) ProtoMessage() {}

func (x *CreateSeasonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeasonRequest.ProtoReflect.Descriptor instead.
func (*CreateSeasonRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{58}
}

func (x *CreateSeasonRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateSeasonRequest) GetTrailerUrl() string {
	if x != nil {
		return x.TrailerUrl
	}
	return ""
}

func (x *CreateSeasonRequest) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

func (x *CreateSeasonRequest) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *CreateSeasonRequest) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *CreateSeasonRequest) GetWrittenBy() *FilmCrew {
	if x != nil {
		return x.WrittenBy
	}
	return nil
}

func (x *CreateSeasonRequest) GetProducedBy() *FilmCrew {
	if x != nil {
		return x.ProducedBy
	}
	return nil
}

func (x *CreateSeasonRequest) GetDirectedBy() *FilmCrew {
	if x != nil {
		return x.DirectedBy
	}
	return nil
}

func (x *CreateSeasonRequest) GetEpisodes() *ShortEpisodeList {
	if x != nil {
		return x.Episodes
	}
	return nil
}

func (x *CreateSeasonRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

func (x *CreateSeasonRequest) GetShowId() string {
	if x != nil {
		return x.ShowId
	}
	return ""
}

type ListSeasonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seasons []*Season `protobuf:"bytes,1,rep,name=seasons,proto3" json:"seasons,omitempty"`
}

func (x *ListSeasonResponse) Reset() {
	*x = ListSeasonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSeasonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeasonResponse) ProtoMessage() {}

func (x *ListSeasonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeasonResponse.ProtoReflect.Descriptor instead.
func (*ListSeasonResponse) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{59}
}

func (x *ListSeasonResponse) GetSeasons() []*Season {
	if x != nil {
		return x.Seasons
	}
	return nil
}

type UploadSeasonPostersServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId    string   `protobuf:"bytes,1,opt,name=seasonId,proto3" json:"seasonId,omitempty"`
	PostersPath []string `protobuf:"bytes,2,rep,name=postersPath,proto3" json:"postersPath,omitempty"`
}

func (x *UploadSeasonPostersServiceRequest) Reset() {
	*x = UploadSeasonPostersServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSeasonPostersServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSeasonPostersServiceRequest) ProtoMessage() {}

func (x *UploadSeasonPostersServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSeasonPostersServiceRequest.ProtoReflect.Descriptor instead.
func (*UploadSeasonPostersServiceRequest) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{60}
}

func (x *UploadSeasonPostersServiceRequest) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *UploadSeasonPostersServiceRequest) GetPostersPath() []string {
	if x != nil {
		return x.PostersPath
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x53,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x22, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x22, 0xbb, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x80, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x1b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x61, 0x0a, 0x21, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x5e, 0x0a, 0x20, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x67, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a,
	0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x46, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0x38, 0x0a,
	0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x4d, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x39, 0x0a, 0x15, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x69, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x65,
	0x62, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xeb, 0x01,
	0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x68, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x0a, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a,
	0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x43,
	0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x0a, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x16, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x0b, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbb, 0x02, 0x0a, 0x09, 0x43, 0x65, 0x6c,
	0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x66, 0x44, 0x65, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x66, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x62, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x44, 0x65,
	0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x4f, 0x66, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x4f, 0x66, 0x42, 0x69, 0x72, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4d, 0x0a, 0x15, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x65,
	0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x24, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69,
	0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0xc0, 0x03, 0x0a, 0x07, 0x45, 0x70, 0x69, 0x73, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79,
	0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xbd, 0x03, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79,
	0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3c,
	0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x09,
	0x46, 0x69, 0x6c, 0x6d, 0x53, 0x74, 0x61, 0x66, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x3a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x12, 0x2e, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x22, 0x72, 0x0a, 0x0e, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x4d, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x65,
	0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x73, 0x22, 0x86,
	0x01, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x22, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x8a,
	0x05, 0x0a, 0x04, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x2b, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65,
	0x77, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x31, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d,
	0x43, 0x72, 0x65, 0x77, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x2f, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42,
	0x79, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x0a, 0x0b, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x0a, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x0b, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x3e, 0x0a, 0x0c, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x4d, 0x0a, 0x05, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x22, 0x87, 0x05, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x47,
	0x65, 0x6e, 0x72, 0x65, 0x73, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d,
	0x43, 0x72, 0x65, 0x77, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x2f, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x42, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x37,
	0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x52, 0x05, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc4, 0x03, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74,
	0x74, 0x65, 0x6e, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52,
	0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x22, 0xc1, 0x03, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x42, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x09, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x64, 0x42, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65, 0x77, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x43, 0x72, 0x65,
	0x77, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x45,
	0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x65, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x3f,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22,
	0x61, 0x0a, 0x21, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x32, 0xcf, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x76, 0x63, 0x12, 0x61, 0x0a, 0x14, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x46, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x54,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xca, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x76, 0x63, 0x12, 0x5f, 0x0a, 0x13,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x46, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x52, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0xcf, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x53, 0x76, 0x63, 0x12, 0x61, 0x0a, 0x14, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x46, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x54, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0xd9, 0x01, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x53, 0x76, 0x63, 0x12, 0x65,
	0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x58, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32,
	0xca, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x53, 0x76, 0x63, 0x12, 0x5f, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x53, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x52, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x22,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc5, 0x01, 0x0a,
	0x12, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x76, 0x63, 0x12, 0x5d, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x46, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x12, 0x50, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x94, 0x04, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x53, 0x76, 0x63, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x14,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xda, 0x03, 0x0a, 0x0c,
	0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x53, 0x76, 0x63, 0x12, 0x48, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x62,
	0x72, 0x69, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x65, 0x6c,
	0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72,
	0x69, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x16, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x65,
	0x62, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c,
	0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x65, 0x62,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x65, 0x62,
	0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x65, 0x6c, 0x65, 0x62, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x92, 0x04, 0x0a, 0x0a, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x53, 0x76, 0x63, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x70,
	0x69, 0x73, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb5, 0x04,
	0x0a, 0x07, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x76, 0x63, 0x12, 0x39, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68,
	0x6f, 0x77, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x12,
	0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x1a, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x68, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x13, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xb3, 0x02, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x53,
	0x76, 0x63, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x22, 0x00,
	0x12, 0x35, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x17, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x1a, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x22, 0x00, 0x32, 0xfe, 0x03, 0x0a, 0x09,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x76, 0x63, 0x12, 0x3f, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x0f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf4, 0x02, 0x0a,
	0x0d, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x53, 0x76, 0x63, 0x12, 0x4b,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x61, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_service_proto_goTypes = []interface{}{
	(*EmptyResponse)(nil),                        // 0: service.EmptyResponse
	(*GetAllRequest)(nil),                        // 1: service.GetAllRequest
	(*ListArticlesRequest)(nil),                  // 2: service.ListArticlesRequest
	(*UploadSeasonPostersFSRequest)(nil),         // 3: service.UploadSeasonPostersFSRequest
	(*UploadArticlePostersFSRequest)(nil),        // 4: service.UploadArticlePostersFSRequest
	(*UploadArticlePostersServiceRequest)(nil),   // 5: service.UploadArticlePostersServiceRequest
	(*UploadEpisodePostersFSRequest)(nil),        // 6: service.UploadEpisodePostersFSRequest
	(*UploadSeriesPostersFSRequest)(nil),         // 7: service.UploadSeriesPostersFSRequest
	(*UploadMoviePostersFSRequest)(nil),          // 8: service.UploadMoviePostersFSRequest
	(*UploadSeriesPostersServiceRequest)(nil),    // 9: service.UploadSeriesPostersServiceRequest
	(*UploadMoviePostersServiceRequest)(nil),     // 10: service.UploadMoviePostersServiceRequest
	(*UploadImageRequest)(nil),                   // 11: service.UploadImageRequest
	(*ImageInfo)(nil),                            // 12: service.ImageInfo
	(*UploadCelebrityPostersFSRequest)(nil),      // 13: service.UploadCelebrityPostersFSRequest
	(*UploadPosterResponse)(nil),                 // 14: service.UploadPosterResponse
	(*UploadImagesResponse)(nil),                 // 15: service.UploadImagesResponse
	(*DeleteSeriesPosterRequest)(nil),            // 16: service.DeleteSeriesPosterRequest
	(*DeleteMoviePosterRequest)(nil),             // 17: service.DeleteMoviePosterRequest
	(*UploadPostersResponse)(nil),                // 18: service.UploadPostersResponse
	(*DeleteSeasonPosterRequest)(nil),            // 19: service.DeleteSeasonPosterRequest
	(*DeleteArticlePosterRequest)(nil),           // 20: service.DeleteArticlePosterRequest
	(*DeleteEpisodePosterRequest)(nil),           // 21: service.DeleteEpisodePosterRequest
	(*DeleteCelebrityPosterRequest)(nil),         // 22: service.DeleteCelebrityPosterRequest
	(*Article)(nil),                              // 23: service.Article
	(*CreateArticleRequest)(nil),                 // 24: service.CreateArticleRequest
	(*ArticleListResponse)(nil),                  // 25: service.ArticleListResponse
	(*Journalist)(nil),                           // 26: service.Journalist
	(*CreateJournalistRequest)(nil),              // 27: service.CreateJournalistRequest
	(*JournalistListResponse)(nil),               // 28: service.JournalistListResponse
	(*ShortJournalist)(nil),                      // 29: service.ShortJournalist
	(*Celebrity)(nil),                            // 30: service.Celebrity
	(*CreateCelebrityRequest)(nil),               // 31: service.CreateCelebrityRequest
	(*CelebrityListResponse)(nil),                // 32: service.CelebrityListResponse
	(*GetByIDRequest)(nil),                       // 33: service.GetByIDRequest
	(*GetByNameRequest)(nil),                     // 34: service.GetByNameRequest
	(*UploadCelebrityPostersServiceRequest)(nil), // 35: service.UploadCelebrityPostersServiceRequest
	(*Episode)(nil),                              // 36: service.Episode
	(*CreateEpisodeRequest)(nil),                 // 37: service.CreateEpisodeRequest
	(*ListEpisodeResponse)(nil),                  // 38: service.ListEpisodeResponse
	(*ShowLength)(nil),                           // 39: service.ShowLength
	(*FilmStaff)(nil),                            // 40: service.FilmStaff
	(*FilmCrew)(nil),                             // 41: service.FilmCrew
	(*ShortCelebrity)(nil),                       // 42: service.ShortCelebrity
	(*ShortCelebrities)(nil),                     // 43: service.ShortCelebrities
	(*ShortEpisode)(nil),                         // 44: service.ShortEpisode
	(*ShortEpisodeList)(nil),                     // 45: service.ShortEpisodeList
	(*UploadEpisodePostersServiceRequest)(nil),   // 46: service.UploadEpisodePostersServiceRequest
	(*Show)(nil),                                 // 47: service.Show
	(*ShortGenres)(nil),                          // 48: service.ShortGenres
	(*ShortGenre)(nil),                           // 49: service.ShortGenre
	(*ShortSeason)(nil),                          // 50: service.ShortSeason
	(*ShortSeasons)(nil),                         // 51: service.ShortSeasons
	(*Genre)(nil),                                // 52: service.Genre
	(*GenreListResponse)(nil),                    // 53: service.GenreListResponse
	(*CreateShowRequest)(nil),                    // 54: service.CreateShowRequest
	(*ShowListResponse)(nil),                     // 55: service.ShowListResponse
	(*CreateGenreRequest)(nil),                   // 56: service.CreateGenreRequest
	(*Season)(nil),                               // 57: service.Season
	(*CreateSeasonRequest)(nil),                  // 58: service.CreateSeasonRequest
	(*ListSeasonResponse)(nil),                   // 59: service.ListSeasonResponse
	(*UploadSeasonPostersServiceRequest)(nil),    // 60: service.UploadSeasonPostersServiceRequest
	(*timestamppb.Timestamp)(nil),                // 61: google.protobuf.Timestamp
}
var file_service_proto_depIdxs = []int32{
	12,  // 0: service.UploadImageRequest.info:type_name -> service.ImageInfo
	61,  // 1: service.Article.releaseDate:type_name -> google.protobuf.Timestamp
	29,  // 2: service.Article.journalist:type_name -> service.ShortJournalist
	61,  // 3: service.CreateArticleRequest.releaseDate:type_name -> google.protobuf.Timestamp
	27,  // 4: service.CreateArticleRequest.journalist:type_name -> service.CreateJournalistRequest
	23,  // 5: service.ArticleListResponse.articles:type_name -> service.Article
	26,  // 6: service.JournalistListResponse.journalists:type_name -> service.Journalist
	61,  // 7: service.Celebrity.dateOfBirth:type_name -> google.protobuf.Timestamp
	61,  // 8: service.Celebrity.dateOfDeath:type_name -> google.protobuf.Timestamp
	61,  // 9: service.CreateCelebrityRequest.dateOfBirth:type_name -> google.protobuf.Timestamp
	61,  // 10: service.CreateCelebrityRequest.dateOfDeath:type_name -> google.protobuf.Timestamp
	30,  // 11: service.CelebrityListResponse.celebrities:type_name -> service.Celebrity
	39,  // 12: service.Episode.showLength:type_name -> service.ShowLength
	41,  // 13: service.Episode.writtenBy:type_name -> service.FilmCrew
	41,  // 14: service.Episode.producedBy:type_name -> service.FilmCrew
	41,  // 15: service.Episode.directedBy:type_name -> service.FilmCrew
	43,  // 16: service.Episode.starring:type_name -> service.ShortCelebrities
	39,  // 17: service.CreateEpisodeRequest.showLength:type_name -> service.ShowLength
	41,  // 18: service.CreateEpisodeRequest.writtenBy:type_name -> service.FilmCrew
	41,  // 19: service.CreateEpisodeRequest.producedBy:type_name -> service.FilmCrew
	41,  // 20: service.CreateEpisodeRequest.directedBy:type_name -> service.FilmCrew
	43,  // 21: service.CreateEpisodeRequest.starring:type_name -> service.ShortCelebrities
	36,  // 22: service.ListEpisodeResponse.episodes:type_name -> service.Episode
	40,  // 23: service.FilmCrew.filmCrew:type_name -> service.FilmStaff
	42,  // 24: service.ShortCelebrities.shortCelebs:type_name -> service.ShortCelebrity
	44,  // 25: service.ShortEpisodeList.shortEpisodes:type_name -> service.ShortEpisode
	61,  // 26: service.Show.releaseDate:type_name -> google.protobuf.Timestamp
	61,  // 27: service.Show.endDate:type_name -> google.protobuf.Timestamp
	39,  // 28: service.Show.length:type_name -> service.ShowLength
	48,  // 29: service.Show.genres:type_name -> service.ShortGenres
	41,  // 30: service.Show.directedBy:type_name -> service.FilmCrew
	41,  // 31: service.Show.producedBy:type_name -> service.FilmCrew
	41,  // 32: service.Show.writtenBy:type_name -> service.FilmCrew
	43,  // 33: service.Show.starring:type_name -> service.ShortCelebrities
	51,  // 34: service.Show.seasons:type_name -> service.ShortSeasons
	49,  // 35: service.ShortGenres.genres:type_name -> service.ShortGenre
	50,  // 36: service.ShortSeasons.seasons:type_name -> service.ShortSeason
	52,  // 37: service.GenreListResponse.genres:type_name -> service.Genre
	61,  // 38: service.CreateShowRequest.releaseDate:type_name -> google.protobuf.Timestamp
	61,  // 39: service.CreateShowRequest.endDate:type_name -> google.protobuf.Timestamp
	39,  // 40: service.CreateShowRequest.length:type_name -> service.ShowLength
	48,  // 41: service.CreateShowRequest.genres:type_name -> service.ShortGenres
	41,  // 42: service.CreateShowRequest.directedBy:type_name -> service.FilmCrew
	41,  // 43: service.CreateShowRequest.producedBy:type_name -> service.FilmCrew
	41,  // 44: service.CreateShowRequest.writtenBy:type_name -> service.FilmCrew
	43,  // 45: service.CreateShowRequest.starring:type_name -> service.ShortCelebrities
	51,  // 46: service.CreateShowRequest.seasons:type_name -> service.ShortSeasons
	47,  // 47: service.ShowListResponse.shows:type_name -> service.Show
	61,  // 48: service.Season.releaseDate:type_name -> google.protobuf.Timestamp
	41,  // 49: service.Season.writtenBy:type_name -> service.FilmCrew
	41,  // 50: service.Season.producedBy:type_name -> service.FilmCrew
	41,  // 51: service.Season.directedBy:type_name -> service.FilmCrew
	45,  // 52: service.Season.episodes:type_name -> service.ShortEpisodeList
	61,  // 53: service.CreateSeasonRequest.releaseDate:type_name -> google.protobuf.Timestamp
	41,  // 54: service.CreateSeasonRequest.writtenBy:type_name -> service.FilmCrew
	41,  // 55: service.CreateSeasonRequest.producedBy:type_name -> service.FilmCrew
	41,  // 56: service.CreateSeasonRequest.directedBy:type_name -> service.FilmCrew
	45,  // 57: service.CreateSeasonRequest.episodes:type_name -> service.ShortEpisodeList
	57,  // 58: service.ListSeasonResponse.seasons:type_name -> service.Season
	4,   // 59: service.FileServerArticleSvc.UploadArticlePosters:input_type -> service.UploadArticlePostersFSRequest
	20,  // 60: service.FileServerArticleSvc.DeleteArticlePoster:input_type -> service.DeleteArticlePosterRequest
	3,   // 61: service.FileServerSeasonSvc.UploadSeasonPosters:input_type -> service.UploadSeasonPostersFSRequest
	19,  // 62: service.FileServerSeasonSvc.DeleteSeasonPoster:input_type -> service.DeleteSeasonPosterRequest
	6,   // 63: service.FileServerEpisodeSvc.UploadEpisodePosters:input_type -> service.UploadEpisodePostersFSRequest
	21,  // 64: service.FileServerEpisodeSvc.DeleteEpisodePoster:input_type -> service.DeleteEpisodePosterRequest
	13,  // 65: service.FileServerCelebritySvc.UploadCelebrityPosters:input_type -> service.UploadCelebrityPostersFSRequest
	22,  // 66: service.FileServerCelebritySvc.DeleteCelebrityPoster:input_type -> service.DeleteCelebrityPosterRequest
	7,   // 67: service.FileServerSeriesSvc.UploadSeriesPosters:input_type -> service.UploadSeriesPostersFSRequest
	16,  // 68: service.FileServerSeriesSvc.DeleteSeriesPoster:input_type -> service.DeleteSeriesPosterRequest
	8,   // 69: service.FileServerMovieSvc.UploadMoviePosters:input_type -> service.UploadMoviePostersFSRequest
	17,  // 70: service.FileServerMovieSvc.DeleteMoviePoster:input_type -> service.DeleteMoviePosterRequest
	24,  // 71: service.ArticleSvc.CreateArticle:input_type -> service.CreateArticleRequest
	33,  // 72: service.ArticleSvc.GetArticle:input_type -> service.GetByIDRequest
	23,  // 73: service.ArticleSvc.UpdateArticle:input_type -> service.Article
	2,   // 74: service.ArticleSvc.ListArticles:input_type -> service.ListArticlesRequest
	33,  // 75: service.ArticleSvc.ListArticlesByJournalist:input_type -> service.GetByIDRequest
	5,   // 76: service.ArticleSvc.UploadArticlePosters:input_type -> service.UploadArticlePostersServiceRequest
	20,  // 77: service.ArticleSvc.DeleteArticlePoster:input_type -> service.DeleteArticlePosterRequest
	31,  // 78: service.CelebritySvc.CreateCelebrity:input_type -> service.CreateCelebrityRequest
	33,  // 79: service.CelebritySvc.GetCelebrity:input_type -> service.GetByIDRequest
	30,  // 80: service.CelebritySvc.UpdateCelebrity:input_type -> service.Celebrity
	35,  // 81: service.CelebritySvc.UploadCelebrityPosters:input_type -> service.UploadCelebrityPostersServiceRequest
	22,  // 82: service.CelebritySvc.DeleteCelebrityPoster:input_type -> service.DeleteCelebrityPosterRequest
	1,   // 83: service.CelebritySvc.ListCelebrities:input_type -> service.GetAllRequest
	37,  // 84: service.EpisodeSvc.CreateEpisode:input_type -> service.CreateEpisodeRequest
	33,  // 85: service.EpisodeSvc.GetEpisode:input_type -> service.GetByIDRequest
	36,  // 86: service.EpisodeSvc.UpdateEpisode:input_type -> service.Episode
	46,  // 87: service.EpisodeSvc.UploadEpisodePosters:input_type -> service.UploadEpisodePostersServiceRequest
	21,  // 88: service.EpisodeSvc.DeleteEpisodePoster:input_type -> service.DeleteEpisodePosterRequest
	33,  // 89: service.EpisodeSvc.ListSeasonEpisodes:input_type -> service.GetByIDRequest
	1,   // 90: service.EpisodeSvc.ListCollectionEpisodes:input_type -> service.GetAllRequest
	54,  // 91: service.ShowSvc.CreateShow:input_type -> service.CreateShowRequest
	33,  // 92: service.ShowSvc.GetShow:input_type -> service.GetByIDRequest
	47,  // 93: service.ShowSvc.UpdateShow:input_type -> service.Show
	1,   // 94: service.ShowSvc.ListShows:input_type -> service.GetAllRequest
	9,   // 95: service.ShowSvc.UploadSeriesPosters:input_type -> service.UploadSeriesPostersServiceRequest
	16,  // 96: service.ShowSvc.DeleteSeriesPoster:input_type -> service.DeleteSeriesPosterRequest
	10,  // 97: service.ShowSvc.UploadMoviePosters:input_type -> service.UploadMoviePostersServiceRequest
	17,  // 98: service.ShowSvc.DeleteMoviePoster:input_type -> service.DeleteMoviePosterRequest
	56,  // 99: service.GenreSvc.CreateGenre:input_type -> service.CreateGenreRequest
	33,  // 100: service.GenreSvc.GetGenre:input_type -> service.GetByIDRequest
	52,  // 101: service.GenreSvc.UpdateGenre:input_type -> service.Genre
	1,   // 102: service.GenreSvc.ListGenres:input_type -> service.GetAllRequest
	34,  // 103: service.GenreSvc.GetGenreByName:input_type -> service.GetByNameRequest
	58,  // 104: service.SeasonSvc.CreateSeason:input_type -> service.CreateSeasonRequest
	33,  // 105: service.SeasonSvc.GetSeason:input_type -> service.GetByIDRequest
	57,  // 106: service.SeasonSvc.UpdateSeason:input_type -> service.Season
	60,  // 107: service.SeasonSvc.UploadSeasonPosters:input_type -> service.UploadSeasonPostersServiceRequest
	19,  // 108: service.SeasonSvc.DeleteSeasonPoster:input_type -> service.DeleteSeasonPosterRequest
	33,  // 109: service.SeasonSvc.ListShowSeasons:input_type -> service.GetByIDRequest
	1,   // 110: service.SeasonSvc.ListSeasonsCollection:input_type -> service.GetAllRequest
	27,  // 111: service.JournalistSvc.CreateJournalist:input_type -> service.CreateJournalistRequest
	33,  // 112: service.JournalistSvc.GetJournalist:input_type -> service.GetByIDRequest
	26,  // 113: service.JournalistSvc.UpdateJournalist:input_type -> service.Journalist
	1,   // 114: service.JournalistSvc.ListJournalists:input_type -> service.GetAllRequest
	34,  // 115: service.JournalistSvc.GetJournalistByName:input_type -> service.GetByNameRequest
	14,  // 116: service.FileServerArticleSvc.UploadArticlePosters:output_type -> service.UploadPosterResponse
	0,   // 117: service.FileServerArticleSvc.DeleteArticlePoster:output_type -> service.EmptyResponse
	14,  // 118: service.FileServerSeasonSvc.UploadSeasonPosters:output_type -> service.UploadPosterResponse
	0,   // 119: service.FileServerSeasonSvc.DeleteSeasonPoster:output_type -> service.EmptyResponse
	14,  // 120: service.FileServerEpisodeSvc.UploadEpisodePosters:output_type -> service.UploadPosterResponse
	0,   // 121: service.FileServerEpisodeSvc.DeleteEpisodePoster:output_type -> service.EmptyResponse
	14,  // 122: service.FileServerCelebritySvc.UploadCelebrityPosters:output_type -> service.UploadPosterResponse
	0,   // 123: service.FileServerCelebritySvc.DeleteCelebrityPoster:output_type -> service.EmptyResponse
	14,  // 124: service.FileServerSeriesSvc.UploadSeriesPosters:output_type -> service.UploadPosterResponse
	0,   // 125: service.FileServerSeriesSvc.DeleteSeriesPoster:output_type -> service.EmptyResponse
	14,  // 126: service.FileServerMovieSvc.UploadMoviePosters:output_type -> service.UploadPosterResponse
	0,   // 127: service.FileServerMovieSvc.DeleteMoviePoster:output_type -> service.EmptyResponse
	23,  // 128: service.ArticleSvc.CreateArticle:output_type -> service.Article
	23,  // 129: service.ArticleSvc.GetArticle:output_type -> service.Article
	23,  // 130: service.ArticleSvc.UpdateArticle:output_type -> service.Article
	25,  // 131: service.ArticleSvc.ListArticles:output_type -> service.ArticleListResponse
	25,  // 132: service.ArticleSvc.ListArticlesByJournalist:output_type -> service.ArticleListResponse
	23,  // 133: service.ArticleSvc.UploadArticlePosters:output_type -> service.Article
	0,   // 134: service.ArticleSvc.DeleteArticlePoster:output_type -> service.EmptyResponse
	30,  // 135: service.CelebritySvc.CreateCelebrity:output_type -> service.Celebrity
	30,  // 136: service.CelebritySvc.GetCelebrity:output_type -> service.Celebrity
	30,  // 137: service.CelebritySvc.UpdateCelebrity:output_type -> service.Celebrity
	30,  // 138: service.CelebritySvc.UploadCelebrityPosters:output_type -> service.Celebrity
	0,   // 139: service.CelebritySvc.DeleteCelebrityPoster:output_type -> service.EmptyResponse
	32,  // 140: service.CelebritySvc.ListCelebrities:output_type -> service.CelebrityListResponse
	36,  // 141: service.EpisodeSvc.CreateEpisode:output_type -> service.Episode
	36,  // 142: service.EpisodeSvc.GetEpisode:output_type -> service.Episode
	36,  // 143: service.EpisodeSvc.UpdateEpisode:output_type -> service.Episode
	36,  // 144: service.EpisodeSvc.UploadEpisodePosters:output_type -> service.Episode
	0,   // 145: service.EpisodeSvc.DeleteEpisodePoster:output_type -> service.EmptyResponse
	38,  // 146: service.EpisodeSvc.ListSeasonEpisodes:output_type -> service.ListEpisodeResponse
	38,  // 147: service.EpisodeSvc.ListCollectionEpisodes:output_type -> service.ListEpisodeResponse
	47,  // 148: service.ShowSvc.CreateShow:output_type -> service.Show
	47,  // 149: service.ShowSvc.GetShow:output_type -> service.Show
	47,  // 150: service.ShowSvc.UpdateShow:output_type -> service.Show
	55,  // 151: service.ShowSvc.ListShows:output_type -> service.ShowListResponse
	47,  // 152: service.ShowSvc.UploadSeriesPosters:output_type -> service.Show
	0,   // 153: service.ShowSvc.DeleteSeriesPoster:output_type -> service.EmptyResponse
	47,  // 154: service.ShowSvc.UploadMoviePosters:output_type -> service.Show
	0,   // 155: service.ShowSvc.DeleteMoviePoster:output_type -> service.EmptyResponse
	52,  // 156: service.GenreSvc.CreateGenre:output_type -> service.Genre
	52,  // 157: service.GenreSvc.GetGenre:output_type -> service.Genre
	52,  // 158: service.GenreSvc.UpdateGenre:output_type -> service.Genre
	53,  // 159: service.GenreSvc.ListGenres:output_type -> service.GenreListResponse
	52,  // 160: service.GenreSvc.GetGenreByName:output_type -> service.Genre
	57,  // 161: service.SeasonSvc.CreateSeason:output_type -> service.Season
	57,  // 162: service.SeasonSvc.GetSeason:output_type -> service.Season
	57,  // 163: service.SeasonSvc.UpdateSeason:output_type -> service.Season
	57,  // 164: service.SeasonSvc.UploadSeasonPosters:output_type -> service.Season
	0,   // 165: service.SeasonSvc.DeleteSeasonPoster:output_type -> service.EmptyResponse
	59,  // 166: service.SeasonSvc.ListShowSeasons:output_type -> service.ListSeasonResponse
	59,  // 167: service.SeasonSvc.ListSeasonsCollection:output_type -> service.ListSeasonResponse
	26,  // 168: service.JournalistSvc.CreateJournalist:output_type -> service.Journalist
	26,  // 169: service.JournalistSvc.GetJournalist:output_type -> service.Journalist
	26,  // 170: service.JournalistSvc.UpdateJournalist:output_type -> service.Journalist
	28,  // 171: service.JournalistSvc.ListJournalists:output_type -> service.JournalistListResponse
	26,  // 172: service.JournalistSvc.GetJournalistByName:output_type -> service.Journalist
	116, // [116:173] is the sub-list for method output_type
	59,  // [59:116] is the sub-list for method input_type
	59,  // [59:59] is the sub-list for extension type_name
	59,  // [59:59] is the sub-list for extension extendee
	0,   // [0:59] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArticlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSeasonPostersFSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadArticlePostersFSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadArticlePostersServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadEpisodePostersFSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSeriesPostersFSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMoviePostersFSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSeriesPostersServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadMoviePostersServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCelebrityPostersFSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeriesPosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMoviePosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadPostersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSeasonPosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArticlePosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEpisodePosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCelebrityPosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Journalist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJournalistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalistListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortJournalist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Celebrity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCelebrityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CelebrityListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadCelebrityPostersServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Episode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEpisodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEpisodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmStaff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilmCrew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortCelebrity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortCelebrities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortEpisode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortEpisodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadEpisodePostersServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Show); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortGenres); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortGenre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortSeason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShortSeasons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Genre); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenreListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShowListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGenreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Season); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeasonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSeasonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSeasonPostersServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*UploadImageRequest_Info)(nil),
		(*UploadImageRequest_ChunkData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   13,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}
